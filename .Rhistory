View(citieswithpop)
citieswithpop <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population != "NA")
View(citieswithpop)
View(worldcitiespop)
View(citieswithpop)
### cities with a known population with more than 50000 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 50000)
)
### cities with a known population with more than 50000 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > "50000")
View(citieswithpop)
### cities with a known population with more than 1000000 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > "50000")
## cities with a known population with more than 1000000 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > "1000000")
View(citieswithpop)
### cities with a known population with more than 1.000.000.0 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > "10000000")
### cities with a known population with more than 1.000.000.0 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > "100000000")
### cities with a known population with more than 1.000.000.0 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > "100000000")
View(citieswithpop)
### cities with a known population with more than 1.000.000.0 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > "50000000")
View(citieswithpop)
### cities with a known population with more than 1.000.000.0 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population => 5000)
### cities with a known population with more than 1.000.000.0 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 5000)
View(citieswithpop)
### cities with a known population with more than 1.000.000.0 inhabitants
citieswithpop <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 500000)
View(citieswithpop)
View(citieswithpop)
worldcitiespop <- read.csv("C:/Users/Lokus/Dropbox/Master Thesis/GitHub-Repo/UrbanTerror/worldcitiespop.txt")
View(worldcitiespop)
View(worldcitiespop)
#############################
###building a city dataset###
#############################
worldcitiespop <- read.csv("worldcitiespop.txt")
### cities with a known population with more than 500000 inhabitants
C-620big <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 500000)
worldcitiespop <- read.csv("worldcitiespop.txt")
### cities with a known population with more than 500000 inhabitants
C-620big <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population) Population > 500000)
worldcitiespop <- read.csv("worldcitiespop.txt")
### cities with a known population with more than 500000 inhabitants
C-620big <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population) Population > 500000)
worldcitiespop <- read.csv("worldcitiespop.txt")
### cities with a known population with more than 500000 inhabitants
C620big <- subset(worldcitiespop, select =
c(Country, City, AccentCity, Region, Latitude, Longitude, Population) Population > 500000)
C620big <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 500000)
View(`C620big`)
### cities with a known population with more than 330000 inhabitants
C620big <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 330000)
worldcitiespop <- read.csv("worldcitiespop.txt")
### cities with a known population with more than 333000 inhabitants
C620big <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 333000)
C620big <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 333333)
View(`C620big`)
View(`C620big`)
View(worldcitiespop)
View(`C620big`)
install.packages("httr")
install.packages("dplyr")
install.packages("XML")
library(httr)
library(dplyr)
library(XML)
URL <- 'http://en.wikipedia.org/w/index.php?title=List_of_urban_areas_by_population&section=2'
# Get and parse all tables on the webpage
table <- readHTMLTable(URL)
UrbanCenters <- table [[2]]
UrbanCenters$City <- gsub("\\[.+?\\]","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.+?\\)","", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:digit:]]", "", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:punct:]]", "", UrbanCenters$City)
View(UrbanCenters)
UrbanCenters["AccentCity"] <- UrbanCenters$City
try <- merge(c620big, UrbanCenters, by=c(AccentCity))
try <- merge(C620big, UrbanCenters, by=c(AccentCity))
try <- merge(C620big, UrbanCenters, by=c("AccentCity"))
View(try)
#############################
###building a city dataset###
#############################
worldcitiespop <- read.csv("worldcitiespop.txt")
### cities with a known population with more than 333000 inhabitants
C620big <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 1000000)
install.packages("httr")
install.packages("dplyr")
install.packages("XML")
library(httr)
library(dplyr)
library(XML)
URL <- 'http://en.wikipedia.org/w/index.php?title=List_of_urban_areas_by_population&section=2'
# Get and parse all tables on the webpage
table <- readHTMLTable(URL)
UrbanCenters <- table [[2]]
UrbanCenters$City <- gsub("\\[.+?\\]","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.+?\\)","", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:digit:]]", "", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:punct:]]", "", UrbanCenters$City)
UrbanCenters["AccentCity"] <- UrbanCenters$City
try <- merge(C620big, UrbanCenters, by=c("AccentCity"))
install.packages("httr")
install.packages("dplyr")
worldcitiespop <- read.csv("worldcitiespop.txt")
### cities with a known population with more than 333000 inhabitants
C620big <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 1000000)
library(httr)
library(dplyr)
library(XML)
URL <- 'http://en.wikipedia.org/w/index.php?title=List_of_urban_areas_by_population&section=2'
# Get and parse all tables on the webpage
table <- readHTMLTable(URL)
UrbanCenters <- table [[2]]
UrbanCenters$City <- gsub("\\[.+?\\]","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.+?\\)","", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:digit:]]", "", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:punct:]]", "", UrbanCenters$City)
UrbanCenters["AccentCity"] <- UrbanCenters$City
try <- merge(C620big, UrbanCenters, by=c("AccentCity"))
View(try)
### cities with a known population with more than 333000 inhabitants
C620big <- subset(worldcitiespop, select = c(Country, City, AccentCity, Region, Latitude, Longitude, Population), Population > 10000)
library(httr)
library(dplyr)
library(XML)
URL <- 'http://en.wikipedia.org/w/index.php?title=List_of_urban_areas_by_population&section=2'
# Get and parse all tables on the webpage
table <- readHTMLTable(URL)
UrbanCenters <- table [[2]]
UrbanCenters$City <- gsub("\\[.+?\\]","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.+?\\)","", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:digit:]]", "", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:punct:]]", "", UrbanCenters$City)
UrbanCenters["AccentCity"] <- UrbanCenters$City
try <- merge(C620big, UrbanCenters, by=c("AccentCity"))
View(try)
intsall.package(maps)
intsall.packages(maps)
intsall.packages("maps")
install.packages("maps")
library(maps)
map("state", proj="bonne", param=45, fill=TRUE, plot=FALSE)
area.map(m, "North Dakota")
m<- map("state", proj="bonne", param=45, fill=TRUE, plot=FALSE)
area.map(m, "North Dakota")
m<- map("state", proj="bonne", param=45, fill=TRUE, plot=FALSE)
area.map(m, "North Dakota")
map(usa)
map('usa')
map()
data(world.cities)
View(world.cities)
m <- subset(world.cities, capital = "1")
View(m)
m <- subset(world.cities, select = c(name, capital = "1")
)
View(world.cities)
m <- subset(world.cities, select = c(name, capital = 1))
m <- subset(world.cities, select = c(name, capital = 1))
View(m)
m <- subset(world.cities, select = c(name, capital < 0))
View(m)
m <- subset(world.cities, select = c(name, capital == 0))
m <- subset(world.cities, select = c(name, capital == 1))
View(m)
m <- subset(world.cities, select = name), capital == 1)
m <- subset(world.cities, select = name, capital == 1)
View(m)
View(m)
View(m)
m <- subset(world.cities, select = name, capital == 2)
View(m)
m <- subset(world.cities, select = name, capital == 3)
View(m)
m <- subset(world.cities, select = name, capital == 1)
View(m)
##########  Package Loading  ###########
#Loading all required packages for the UrbanTerror Project using @stevenworthington's ipak.R gist from https://gist.github.com/stevenworthington/3178163.
# ipak function: install and load multiple R packages.
# check to see if packages are installed. Install them if they are not, then load them into the R session.
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "httr", "iterators", "dplyr", "plyr", "stargazer",
"XML", "maps", "ggmap", "Imap", "geosphere", "maptools", "rgeos", "foreach", "DataCombine")
ipak(packages)
rm(packages)
rm(ipak)
# Global Terrorism Database (GTD) with some new scales and categories we introduced to the GTD for our purposes
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# City level data from a number of sources, including web scraping
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.csv")} else{source("1.c - City Data.R")}
setwd("C:/Users/Lokus/Dropbox/UrbanTerror")
# Global Terrorism Database (GTD) with some new scales and categories we introduced to the GTD for our purposes
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# City level data from a number of sources, including web scraping
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.csv")} else{source("1.c - City Data.R")}
View(CountryData)
#############################################################################################################
############################# Merge the Data Sets into a "PreGTD"###########################################
#############################################################################################################
###### Merge City and Country Data ######
# create merge variable
WC.UC.dist["merge"] <- paste(WC.UC.dist$country.etc, WC.UC.dist$old.name, sep="")
WC.UC.dist <- WC.UC.dist[order(WC.UC.dist$merge, WC.UC.dist$capital, -WC.UC.dist$pop),]
WC.UC.dist <- WC.UC.dist[!duplicated(WC.UC.dist$merge), ]
X <- WC.UC.dist
# create all missing years in the city data artificially
X["start"] <- 1970
X["end"] <- 2013
X <- TimeFill(X, GroupVar = 'merge', StartVar = 'start', EndVar = 'end')
X$TimeFilled <- NULL
# merge city and country data
WC.UC.full<- merge(X, WC.UC.dist, by=c("merge"), all.x=TRUE)
WC.UC.full <- merge(WC.UC.full, CountryData, by.x=c("country.etc", "Time"), by.y=c("country", "year"), all.x=TRUE, sort=TRUE)
rm(X)
# minor cleanups
WC.UC.full$part.of.urban.center[is.na(WC.UC.full$part.of.urban.center)] <- FALSE
WC.UC.full$in.urban.centers.environment[is.na(WC.UC.full$in.urban.centers.environment)] <- FALSE
WC.UC.full$in.urban.centers.environment <- recode(WC.UC.full$in.urban.centers.environment, "TRUE=1")
WC.UC.full$part.of.urban.center <- recode(WC.UC.full$part.of.urban.center, "TRUE=1")
WC.UC.full$capital[is.na(WC.UC.full$capital)] <- 0
WC.UC.full$largestC[is.na(WC.UC.full$largestC)] <- 0
WC.UC.full$largest.UC[is.na(WC.UC.full$largest.UC)] <- 0
WC.UC.full$coastalMC[is.na(WC.UC.full$coastalMC)] <- 0
###### Change City Size on yearly basis with WDi data and introduce relative city size (Rel.CS) ######
# prepare
G2<-WC.UC.full
G2$SP.URB.TOTL <- as.numeric(G2$SP.URB.TOTL )
G2$MAX.URB.TOTL <- as.numeric(G2$MAX.URB.TOTL)
G2$EN.URB.MCTY <- as.numeric(G2$EN.URB.MCTY)
G2$MAX.URB.MCTY <- as.numeric(G2$MAX.URB.MCTY)
G2$EN.URB.LCTY.UR <- as.numeric(G2$EN.URB.LCTY.UR)
G2$MAX.URB.LCTY.UR <- as.numeric(G2$MAX.URB.LCTY.UR)
G2$WC.UC.dist.km <- as.numeric(G2$WC.UC.dist.km)
G2$Area <- as.numeric(G2$Area)
G2["year"] <- as.numeric(G2$Time)
G2["pop.2013"] <- as.numeric(G2$pop)
G2$old.pop <- G2$pop
G2$pop <- NULL
# Area Manipulation for UC's, in order to account for growing urban centers incorporating less in the past
G2$Area <-ifelse(G2$largest.UC==1 & !is.na(G2$EN.URB.LCTY.UR),
(G2$EN.URB.LCTY.UR/G2$MAX.URB.LCTY.UR*G2$Area), G2$Area)
G2$Area <-ifelse(G2$largest.UC==0 & !is.na(G2$EN.URB.MCTY)
& !is.na(G2$EN.URB.LCTY.UR) & !is.na(G2$MAX.URB.MCTY) & !is.na(G2$MAX.URB.LCTY.UR)
,((G2$EN.URB.MCTY - G2$EN.URB.LCTY.UR)/(G2$MAX.URB.MCTY - G2$MAX.URB.LCTY.UR)*G2$Area), G2$Area)
# re-answering the question again, if a city is part of an UC, now with new Area estimates of all UCs
G2["inUC"] <- ifelse((G2$WC.UC.dist.km <= (15+(((G2$Area)/pi)**0.5))), 1, 0) # 20km + radius of UC as circle
G2["aroundUC"] <- ifelse((G2$WC.UC.dist.km <= (30+(((G2$Area)/pi)**0.5))), 1, 0) # 40km + radius of UC as circle
G2$inUC[is.na(G2$inUC)]<- 0
#in case we only have very limited numers on the country population, we put in some first assumptions based on total population
# and UC population
G2["city.population_with_time"] <- ifelse(G2$inUC==1, G2$Population, G2$pop.2013)
G2$city.population_with_time <- ifelse(!is.na(G2$SP.POP.TOTL), G2$pop.2013*G2$SP.POP.TOTL/G2$MAX.POP.TOTL, G2$pop.2013)
#in case we only have URB.POP numers, we assume that all cities grew with those numbers each year
G2$city.population_with_time <- ifelse(!is.na(G2$SP.URB.TOTL), G2$pop.2013*G2$SP.URB.TOTL/G2$MAX.URB.TOTL, G2$pop.2013)
# if it is the largest city, EN.URB.LCTY.UR is the size estimator for each year
G2$city.population_with_time <-ifelse((G2$inUC==0 & G2$largestC==1 & !is.na(G2$EN.URB.LCTY.UR))|
(G2$inUC==1 & G2$largest.UC==1 & !is.na(G2$EN.URB.LCTY.UR)),
G2$EN.URB.LCTY.UR, G2$city.population_with_time)
# if it is a city with less than 1mil, SP.URB.TOTL minus EN.URB.MCTY is the size estimator for each year
G2$city.population_with_time <- ifelse(G2$city.population_with_time!=G2$EN.URB.LCTY.UR
& G2$pop.2013<=999999
& G2$EN.URB.MCTY <= G2$SP.URB.TOTL & G2$MAX.URB.MCTY <= G2$MAX.URB.TOTL
& !(((G2$SP.URB.TOTL-G2$EN.URB.MCTY)/(G2$MAX.URB.TOTL-G2$MAX.URB.MCTY)
*G2$city.population_with_time)>=G2$EN.URB.LCTY.UR)
& !(((G2$SP.URB.TOTL-G2$EN.URB.MCTY)/(G2$MAX.URB.TOTL-G2$MAX.URB.MCTY))<=0)
& !is.na(G2$EN.URB.MCTY) & G2$MAX.URB.TOTL!=0 & G2$MAX.URB.MCTY!=0
& !is.na(G2$EN.URB.LCTY.UR) & !is.na(G2$SP.URB.TOTL),
((G2$SP.URB.TOTL-G2$EN.URB.MCTY)/(G2$MAX.URB.TOTL-G2$MAX.URB.MCTY)
*G2$city.population_with_time), (G2$city.population_with_time))
# if it is a city with more than 1mil, EN.URB.MCTY minus EN.URB.LCTY.UR is the size estimator for each year
G2$city.population_with_time <- ifelse(G2$city.population_with_time!=G2$EN.URB.LCTY.UR & G2$pop.2013>=999999
& !(((G2$EN.URB.MCTY-G2$EN.URB.LCTY.UR)/
(G2$MAX.URB.MCTY-G2$MAX.URB.LCTY.UR))<=0)
& !(((G2$EN.URB.MCTY-G2$EN.URB.LCTY.UR)/
(G2$MAX.URB.MCTY-G2$MAX.URB.LCTY.UR)
*G2$city.population_with_time)>=G2$EN.URB.LCTY.UR)
& !is.na(G2$EN.URB.MCTY) & !is.na(G2$EN.URB.LCTY.UR) & G2$MAX.URB.MCTY!=0,
((G2$EN.URB.MCTY-G2$EN.URB.LCTY.UR)/(G2$MAX.URB.MCTY-G2$MAX.URB.LCTY.UR)
*G2$city.population_with_time), G2$city.population_with_time)
# some final cleaning of minor leftovers
G2$city.population_with_time <- ifelse(!G2$city.population_with_time<=G2$EN.URB.LCTY.UR & G2$largestC==1,
G2$EN.URB.LCTY.UR, G2$city.population_with_time)
G2$city.population_with_time <- ifelse(!G2$city.population_with_time<=G2$EN.URB.LCTY.UR & G2$largestC==0,
runif(1, (G2$EN.URB.LCTY.UR/10), G2$EN.URB.LCTY.UR), G2$city.population_with_time)
###### introduce some new variable, because finally we can ######
# introducing relative city size to countries largest city
G2["Rel.CS"] <- G2$city.population_with_time/G2$EN.URB.LCTY.UR
G2 <- G2[order(-G2$Rel.CS),]
# rename the new population estimate
G2["pop.year"] <-  round(G2$city.population_with_time)
# introducing yearly population size rank of each city within its country
G2 <- G2[order(G2$country.etc, G2$year, -G2$pop.year),]
G2$RANK.Country <- unlist(with(G2, tapply(-pop.year, list(year, country.etc), function(x) rank(x, ties.method= "min"))))
Rank.Country.MAX<-aggregate(G2$RANK.Country, by=list(G2$year, G2$country.etc), FUN=max)
colnames(Rank.Country.MAX)[1] <- "year"
colnames(Rank.Country.MAX)[2] <- "country.etc"
colnames(Rank.Country.MAX)[3] <- "Rank.Country.MAX"
G2 <- merge(G2, Rank.Country.MAX, by=c("year", "country.etc"), all.x=TRUE)
# introducing yearly population size rank of each city in the world comparasion
G2 <- G2[order(G2$year, -G2$pop.year),]
G2$RANK.World <- unlist(with(G2, tapply(-pop.year, year, function(x) rank(x, ties.method= "min"))))
Rank.World.MAX<-aggregate(G2$RANK.World, by=list(G2$year), FUN=max)
colnames(Rank.World.MAX)[1] <- "year"
colnames(Rank.World.MAX)[2] <- "Rank.World.MAX"
G2 <- merge(G2, Rank.World.MAX, by=c("year"), all.x=TRUE)
rm(Rank.World.MAX, Rank.Country.MAX)
WC.UC.full<-G2
###### Merge combined set with GTD ######
# merge
WC.UC.merge <- WC.UC.full$merge
WC.UC.time <- WC.UC.full$Time
WC.UC.full["merge2"] <- paste(WC.UC.merge, WC.UC.time, sep="")
GTDcity <- GTD$city
GTDcountry <- GTD$country_txt
GTDyear <-GTD$iyear
GTD["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
GTD["merge2"] <-data.frame(paste(GTDcountry, GTDcity, GTDyear, sep=""))
PreGTD <- merge(GTD, WC.UC.full, by=c("merge2"), all.x=TRUE)
PreGTD  <- PreGTD [order(-PreGTD$HUMscale, na.last=TRUE) , ]
# bring the lat lon data together from both the GTD and the city data sets
PreGTD["latg"] <- as.numeric(PreGTD$lat)
PreGTD$lat <- NULL
PreGTD["lat"] <- ifelse(!is.na(PreGTD$latg), as.numeric(PreGTD$latg), (ifelse(!is.na(PreGTD$latitude), as.numeric(PreGTD$latitude), NA)))
PreGTD["lon"] <- ifelse(!is.na(PreGTD$long), as.numeric(PreGTD$long), (ifelse(!is.na(PreGTD$longitude), as.numeric(PreGTD$longitude), NA)))
PreGTD$latg <- NULL
rm(WC.UC.merge, WC.UC.time, GTDWDIcountry, Cities, GTD, Countries, GTDWDI)
# Global Terrorism Database (GTD) with some new scales and categories we introduced to the GTD for our purposes
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# City level data from a number of sources, including web scraping
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.csv")} else{source("1.c - City Data.R")}
WC.UC.full<-G2
rm(G2)
###### Merge combined set with GTD ######
# merge
GTD <- merge(GTD, CountryData, by.x=c("country_txt", "iyear"), by.y=c("country", "year"), all.x=TRUE, sort=TRUE)
WC.UC.merge <- WC.UC.full$merge
WC.UC.time <- WC.UC.full$Time
WC.UC.full["merge2"] <- paste(WC.UC.merge, WC.UC.time, sep="")
GTDcity <- GTD$city
GTDcountry <- GTD$country_txt
GTDyear <-GTD$iyear
GTD["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
GTD["merge2"] <-data.frame(paste(GTDcountry, GTDcity, GTDyear, sep=""))
PreGTD <- merge(GTD, WC.UC.full, by=c("merge2"), all.x=TRUE)
PreGTD  <- PreGTD [order(-PreGTD$HUMscale, na.last=TRUE) , ]
# bring the lat lon data together from both the GTD and the city data sets
PreGTD["latg"] <- as.numeric(PreGTD$lat)
PreGTD$lat <- NULL
PreGTD["lat"] <- ifelse(!is.na(PreGTD$latg), as.numeric(PreGTD$latg), (ifelse(!is.na(PreGTD$latitude), as.numeric(PreGTD$latitude), NA)))
PreGTD["lon"] <- ifelse(!is.na(PreGTD$long), as.numeric(PreGTD$long), (ifelse(!is.na(PreGTD$longitude), as.numeric(PreGTD$longitude), NA)))
PreGTD$latg <- NULL
rm)
# limit and order the new PreGTD
PreGTD <- subset(PreGTD, select=c(eventid, merge2, iyear, imonth, iday, country_txt, region_txt, city, old.name, lat, lon, pop.year, Rel.CS,
inUC, aroundUC, RANK.Country, Rank.Country.MAX, RANK.World, Rank.World.MAX, capital, largestC,
Closest.Urban.Center,largest.UC, coastalMC, WC.UC.dist.km, attacktype1, targtype1, targsubtype1,
weaptype1, weapsubtype1, TUPscale, PROPscale, HUMscale, Extra.WAR.In, Extra.WAR.Out, Intra.WAR,
Inter.WAR, old.pop))
# write a csv, just to be sure
write.csv(PreGTD, file="TerrorData/Pregtd.csv")
rm(WC.UC.merge, WC.UC.time, GTDcountry, GTDcity, GTDyear, GTD, Countries, GTDWDI, WC.UC.dist)
View(PreGTD)
#############################################################################################################
# Global Terrorism Database (GTD) with some new scales and categories we introduced to the GTD for our purposes
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# City level data from a number of sources, including web scraping
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.csv")} else{source("1.c - City Data.R")}
GTD <- merge(GTD, CountryData, by.x=c("country_txt", "iyear"), by.y=c("country", "year"), all.x=TRUE, sort=TRUE)
View(GTD)
WC.UC.merge <- WC.UC.full$merge
WC.UC.time <- WC.UC.full$Time
WC.UC.full["merge2"] <- paste(WC.UC.merge, WC.UC.time, sep="")
GTDcity <- GTD$city
GTDcountry <- GTD$country_txt
GTDyear <-GTD$iyear
GTD["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
GTD["merge2"] <-data.frame(paste(GTDcountry, GTDcity, GTDyear, sep=""))
PreGTD <- merge(GTD, WC.UC.full, by=c("merge2"), all.x=TRUE)
PreGTD  <- PreGTD [order(-PreGTD$HUMscale, na.last=TRUE) , ]
View(PreGTD)
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# City level data from a number of sources, including web scraping
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.csv")} else{source("1.c - City Data.R")}
# merge
GTD <- merge(GTD, CountryData, by.x=c("country_txt", "iyear"), by.y=c("country", "year"), all.x=TRUE, sort=TRUE)
WC.UC.merge <- WC.UC.full$merge
WC.UC.time <- WC.UC.full$Time
WC.UC.full["merge2"] <- paste(WC.UC.merge, WC.UC.time, sep="")
GTDcity <- GTD$city
GTDcountry <- GTD$country_txt
GTDyear <-GTD$iyear
GTD["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
GTD["merge2"] <-data.frame(paste(GTDcountry, GTDcity, GTDyear, sep=""))
WC.UC.full$Extra.WAR.In <- NULL
WC.UC.full$Extra.WAR.Out <- NULL
WC.UC.full$Intra.WAR <- NULL
WC.UC.full$Extra.Inter.WAR <- NULL
PreGTD <- merge(GTD, WC.UC.full, by=c("merge2"), all.x=TRUE)
PreGTD  <- PreGTD [order(-PreGTD$HUMscale, na.last=TRUE) , ]
# bring the lat lon data together from both the GTD and the city data sets
PreGTD["latg"] <- as.numeric(PreGTD$lat)
PreGTD$lat <- NULL
PreGTD["lat"] <- ifelse(!is.na(PreGTD$latg), as.numeric(PreGTD$latg), (ifelse(!is.na(PreGTD$latitude), as.numeric(PreGTD$latitude), NA)))
PreGTD["lon"] <- ifelse(!is.na(PreGTD$long), as.numeric(PreGTD$long), (ifelse(!is.na(PreGTD$longitude), as.numeric(PreGTD$longitude), NA)))
PreGTD$latg <- NULL
# limit and order the new PreGTD
PreGTD <- subset(PreGTD, select=c(eventid, merge2, iyear, imonth, iday, country_txt, region_txt, city, old.name, lat, lon, pop.year, Rel.CS,
inUC, aroundUC, RANK.Country, Rank.Country.MAX, RANK.World, Rank.World.MAX, capital, largestC,
Closest.Urban.Center,largest.UC, coastalMC, WC.UC.dist.km, attacktype1, targtype1, targsubtype1,
weaptype1, weapsubtype1, TUPscale, PROPscale, HUMscale, Extra.WAR.In, Extra.WAR.Out, Intra.WAR,
Inter.WAR, old.pop))
#############################################################################################################
# Global Terrorism Database (GTD) with some new scales and categories we introduced to the GTD for our purposes
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# City level data from a number of sources, including web scraping
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.csv")} else{source("1.c - City Data.R")}
# merge
GTD <- merge(GTD, CountryData, by.x=c("country_txt", "iyear"), by.y=c("country", "year"), all.x=TRUE, sort=TRUE)
WC.UC.merge <- WC.UC.full$merge
WC.UC.time <- WC.UC.full$Time
WC.UC.full["merge2"] <- paste(WC.UC.merge, WC.UC.time, sep="")
GTDcity <- GTD$city
GTDcountry <- GTD$country_txt
GTDyear <-GTD$iyear
GTD["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
GTD["merge2"] <-data.frame(paste(GTDcountry, GTDcity, GTDyear, sep=""))
WC.UC.full$Extra.WAR.In <- NULL
WC.UC.full$Extra.WAR.Out <- NULL
WC.UC.full$Intra.WAR <- NULL
WC.UC.full$Inter.WAR <- NULL
PreGTD <- merge(GTD, WC.UC.full, by=c("merge2"), all.x=TRUE)
PreGTD  <- PreGTD [order(-PreGTD$HUMscale, na.last=TRUE) , ]
# bring the lat lon data together from both the GTD and the city data sets
PreGTD["latg"] <- as.numeric(PreGTD$lat)
PreGTD$lat <- NULL
PreGTD["lat"] <- ifelse(!is.na(PreGTD$latg), as.numeric(PreGTD$latg), (ifelse(!is.na(PreGTD$latitude), as.numeric(PreGTD$latitude), NA)))
PreGTD["lon"] <- ifelse(!is.na(PreGTD$long), as.numeric(PreGTD$long), (ifelse(!is.na(PreGTD$longitude), as.numeric(PreGTD$longitude), NA)))
PreGTD$latg <- NULL
# limit and order the new PreGTD
PreGTD <- subset(PreGTD, select=c(eventid, merge2, iyear, imonth, iday, country_txt, region_txt, city, old.name, lat, lon, pop.year, Rel.CS,
inUC, aroundUC, RANK.Country, Rank.Country.MAX, RANK.World, Rank.World.MAX, capital, largestC,
Closest.Urban.Center,largest.UC, coastalMC, WC.UC.dist.km, attacktype1, targtype1, targsubtype1,
weaptype1, weapsubtype1, TUPscale, PROPscale, HUMscale, Extra.WAR.In, Extra.WAR.Out, Intra.WAR,
Inter.WAR, old.pop))
write.csv(PreGTD, file="TerrorData/Pregtd.csv")
rm(WC.UC.merge, WC.UC.time, GTDcountry, GTDcity, GTDyear, GTD, Countries, GTDWDI, WC.UC.dist)
write.csv(PreGTD, file="TerrorData/Pregtd.csv")
rm(WC.UC.merge, WC.UC.time, GTDcountry, GTDcity, GTDyear, GTD, Countries, GTDWDI, WC.UC.dist)
View(PreGTD)
rm(GTD)
ipak <- function(pkg)
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "httr", "iterators", "dplyr", "plyr", "stargazer",
"XML", "maps", "ggmap", "Imap", "geosphere", "maptools", "rgeos", "foreach", "DataCombine")
?pkg
ipak(packages)
rm(packages)
rm(ipak)
title: "Untitled"
install.packages("MathJax")
title: "Untitled"
getwd()
getwd()
getwed()
getwd()
setwd()
