colombomap  <- merge(colombomap , sum.prop, by.y=c("Group.1"), by.x=c("WCUC.city.old"), all.x=TRUE)
colombomap["sum.hum"]<-colombomap$x.x
colombomap$sum.hum <- ifelse(colombomap$sum.hum >=1500, 1500, colombomap$sum.hum)
colombomap$sum.hum <- ifelse(colombomap$sum.hum >=1000 & colombomap$sum.hum<=1499, 1000, colombomap$sum.hum)
colombomap$sum.hum <- ifelse(colombomap$sum.hum >=500 & colombomap$sum.hum<=999, 500, colombomap$sum.hum)
colombomap$sum.hum <- ifelse(colombomap$sum.hum >=100 & colombomap$sum.hum<=499, 100, colombomap$sum.hum)
colombomap$sum.hum <- ifelse(colombomap$sum.hum >=10 & colombomap$sum.hum<=99, 50, colombomap$sum.hum)
colombomap$sum.hum <- ifelse(colombomap$sum.hum <=10, 10, colombomap$sum.hum)
colombomap$sum.hum <- as.numeric(colombomap$sum.hum)
colombomap["max.hum"]<-colombomap$x.y
colombomap["sum.prop"]<-colombomap$x
colombomap["lon"]<-colombomap$longitude
colombomap["lat"]<-colombomap$latitude
colombomap$inUC<-as.factor(colombomap$inUC)
colombomap$x <- NULL
colombomap$x.y <- NULL
colombomap$x.x <- NULL
rm(sum.hum, max.hum, sum.prop)
colombomap <- colombomap[!duplicated(colombomap$merge),]
clmap <- qmap('Colombo', zoom = 9,
maptype = "satellite",
legend = "topleft", legend="none")
FinalMapC <- clmap + geom_point(aes(x=lon, y=lat, size=sum.hum, color=inUC), data = colombomap) + scale_size_continuous(range=c(3, 15))
print(FinalMapC)
clmap <- qmap('Colombo', zoom = 6,
maptype = "satellite",
legend = "topleft", legend="none")
FinalMapC <- clmap + geom_point(aes(x=lon, y=lat, size=sum.hum, color=inUC), data = colombomap) + scale_size_continuous(range=c(3, 15))
print(FinalMapC)
FinalMapC <- clmap + geom_point(aes(x=lon, y=lat, size=sum.hum, color=inUC), data = colombomap)
+ scale_size_continuous(range=c(3, 15))
+ inset_raster(RASTERacess)
print(FinalMapC)
summary(RASTERacess)
FinalMapC <- clmap + geom_point(aes(x=lon, y=lat, size=sum.hum, color=inUC), data = colombomap)
+ scale_size_continuous(range=c(3, 15))
+ inset_raster(RASTERacess, -180.0042, 180.0042, -65.00417, 75.00417)
print(FinalMapC)
FinalMapC <- clmap + geom_point(aes(x=lon, y=lat, size=sum.hum, color=inUC), data = colombomap) + scale_size_continuous(range=c(3, 15)) + inset_raster(RASTERacess, -180.0042, 180.0042, -65.00417, 75.00417)
print(FinalMapC)
RASTERlight<- raster("Downloaded_Data/LNMDMS2a.tif")
extend(RASTERlight)
extent(RASTERlight)
FinalMapC <- clmap + geom_point(aes(x=lon, y=lat, size=sum.hum, color=inUC), data = colombomap) + scale_size_continuous(range=c(3, 15)) + inset_raster(RASTERlight, -180, 180, -90, 90)
print(FinalMapC)
FinalMapC <- RASTERlight + geom_point(aes(x=lon, y=lat, size=sum.hum, color=inUC), data = colombomap)
print(FinalMapC)
View(WC.UC.dist.gis)
RASTERcoastdist <- raster("Downloaded_Data/DICGSH1a.tif")
p1 <- data.frame(lon=C$lon, lat=C$lat)
p1["coast.dist"] <- extract(RASTERcoastdist, p1)
C["coast.dist"] <- ifelse(p1$coast.dist>=0, 0, round((p1$coast.dist^2)^0.5)
C <- WC.UC.dist
# Distance to coast in km
# http://worldgrids.org/doku.php?id=wiki:layers
RASTERcoastdist <- raster("Downloaded_Data/DICGSH1a.tif")
p1 <- data.frame(lon=C$lon, lat=C$lat)
p1["coast.dist"] <- extract(RASTERcoastdist, p1)
C["coast.dist"] <- ifelse(p1$coast.dist>=0, 0, round((p1$coast.dist^2)^0.5)
C <- WC.UC.dist
C <- WC.UC.dist
RASTERcoastdist <- raster("Downloaded_Data/DICGSH1a.tif")
p1 <- data.frame(lon=C$lon, lat=C$lat)
p1["coast.dist"] <- extract(RASTERcoastdist, p1)
C["coast.dist"] <- ifelse(p1$coast.dist>=0, 0, round((p1$coast.dist^2)^0.5)
)
View(C)
Rank.COASTDIST.MIN<-aggregate(C$coast.dist, by=list(C$country.etc), FUN=min)
colnames(Rank.COASTDIST.MIN)[1] <- "country.etc"
colnames(Rank.COASTDIST.MIN)[2] <- "coast.dist.MIN"
C <- merge(C, Rank.COASTDIST.MIN, by=c("country.etc"), all.x=TRUE)
rm(Rank.COASTDIST.MIN, RASTERcoastdist)
View(C)
View(WC.UC.dist.gis)
RASTERacess <- raster("Downloaded_Data/GACGEM2a.tif")
p1 <- data.frame(lon=C$lon, lat=C$lat)
p1["access"] <- extract(RASTERacess, p1)
C["access"] <- round(p1$access)
# Plus Countries Minimum
Rank.ACCESS.MAX<-aggregate(C$access, by=list(C$country.etc), FUN=min, na.omit=TRUE)
colnames(Rank.ACCESS.MAX)[1] <- "country.etc"
colnames(Rank.ACCESS.MAX)[2] <- "access.MIN"
C <- merge(C, Rank.ACCESS.MAX, by=c("country.etc"), all.x=TRUE)
rm(Rank.ACCESS.MAX, RASTERacess)
View(C)
View(WC.UC.dist.gis)
setwd("C:/Users/Lokus/Dropbox/UrbanTerror")
temp <- tempfile()
temp <- tempfile()
download.file("http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz",temp)
data <- read.table(unz(temp, "a1.dat"))
data <- read.table(unz(temp, "dicgsh0a.tif"))
unlink(temp)
tmpdir <- tempdir()
url <- 'http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz'
file <- basename(url)
download.file(url, file)
file <- "dicgsh0a.tif.gz"
download.file(url, file)
untar(file, compressed = 'gzip', exdir = tmpdir )
RASTERcoastdist <- raster(gzfile("Downloaded_Data/dicgsh0a.tif.gz"))
setwd("C:/Users/Lokus/Dropbox/UrbanTerror")
########## Loading Needed Packages ###########
##############################################
##########  Package Loading  ###########
#Loading all required packages for the UrbanTerror Project using @stevenworthington's ipak.R gist from https://gist.github.com/stevenworthington/3178163.
# ipak function: install and load multiple R packages.
# check to see if packages are installed. Install them if they are not, then load them into the R session.
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "rtiff", "httr", "iterators", "dplyr", "plyr",
"stargazer", "rgdal", "sp", "dismo","XML", "maps", "ggmap", "Imap", "geonames", "GSIF", "tiff",
"raster", "gdalUtils","geosphere", "maptools", "rgeos", "foreach", "DataCombine")
ipak(packages)
rm(packages)
rm(ipak)
data <- read.table(unz(temp, "dicgsh0a.tif"))
RASTERcoastdist <- raster(gzfile("Downloaded_Data/dicgsh0a.tif.gz"))
tmpdir <- tempdir()
url <- 'http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz'
file <- "dicgsh0a.tif.gz"
download.file(url, file)
download.file("http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz",temp)
data <- read.table(unz(temp, "dicgsh0a.tif"))
untar('C:\Users\Lokus\AppData\Local\Temp\RtmpyiTIxV\file223c28cf594a', compressed = 'gzip', exdir = tmp)
untar('file223c28cf594a', compressed = 'gzip', exdir = tmp)
untar('C:/Users/Lokus/AppData/Local/Temp/RtmpyiTIxV/file223c28cf594a', compressed = 'gzip', exdir = tmp)
untar('C://Users/Lokus/AppData/Local/Temp/RtmpyiTIxV/file223c28cf594a', compressed = 'gzip', exdir = tmp)
temp <- tempfile()
untar('C://Users/Lokus/AppData/Local/Temp/RtmpyiTIxV/file223c28cf594a', compressed = 'gzip', exdir = tmp)
untar('C://Users/Lokus/AppData/Local/Temp/RtmpyiTIxV/file223c28cf594a', compressed = 'gzip')
tmpdir <- tempdir()
url <- 'http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz'
file <- "dicgsh0a.tif.gz"
download.file(url, file)
untar(file, compressed = 'gzip')
gzfile(file, compressed = 'gzip')
gzfile(file)
RASTERcoastdist <- raster(file)
RASTERcoastdist <- raster(gzfile(file=)
RASTERcoastdist <- raster(gzfile(file))
gzip.open(file)
gzcon(file)
gzcon (url("http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz"))
gzcon(url("http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz"))
file <- gzcon(url("http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz"))
gzcon(file)
gzfile(file)
RASTERcoastdist <- raster(file)
readLines(file)
gzfile(file)
gzfile(file, encoding = getOption("encoding"))
gzfile(file, "rb")
url(file, open = "", blocking = TRUE,
encoding = getOption("encoding"))
install.packages(R.utils)
install.packages('R.utils')
install.packages("R.utils")
library(R.utils)
gunzip(file)
gunzip(url("http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz"))
gzcon("Downloaded_Data/dicgsh0a.tif.gz")
gunzip("Downloaded_Data/dicgsh0a.tif.gz")
zz<-gunzip("Downloaded_Data/dicgsh0a.tif.gz")
tmpdir <- tempdir()
url <- 'http://ngdc.noaa.gov/eog/data/GDP/GDP_grid_flt.tif.gz'
file <- basename(url)
download.file(url, file)
untar(file, compressed = 'gzip', exdir = tmpdir )
zz<-gunzip("Downloaded_Data/GDP_grid_flt.zip")
zz<-gunzip("Downloaded_Data/GDP_grid_flt.zip", distname="Downloaded_Data/GDP_grid_flt")
zz<-gunzip("Downloaded_Data/GDP_grid_flt.zip", destname="Downloaded_Data/GDP_grid_flt")
gunzip("Downloaded_Data/GDP_grid_flt.zip", destname="Downloaded_Data/GDP_grid_flt.tif")
gunzip("Downloaded_Data/GDP_grid_flt.zip", destname="Downloaded_Data/GDP_grid_flt.tif")
gunzip("Downloaded_Data/GDP_grid_flt.tif.gz", destname="Downloaded_Data/GDP_grid_flt.tif")
gunzip("Downloaded_Data/GDP_grid_flt.tif.gz", destname="Downloaded_Data/GDP_grid_flt2.tif")
url <- 'http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz'
file <- dicgsh0a.tif.gz
file <- "dicgsh0a.tif.gz"
download.file(url, file)
tmpdir <- tempdir()
url <- 'http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz'
file <- "dicgsh0a.tif.gz"
download.file(url, file)
url <- 'http://worldgrids.org/lib/exe/fetch.php?media=dicgsh0a.tif.gz'
file <- 'dicgsh0a.tif.gz'
download.file(url, file)
tmpdir <- tempdir(Downloaded_Data/)
tmpdir <- tempdir(Downloaded_Data)
gunzip("Downloaded_Data/dicgsh0a.tif.gz", destname="Downloaded_Data/dicgsh0a.tif")
raster(dicgsh0a.tif)
raster("Downloaded_Data/dicgsh0a.tif")
gunzip(url("http://ngdc.noaa.gov/eog/data/GDP/GDP_grid_flt.tif.gz"), destname="Downloaded_Data/GDP_grid_flt.tif")
download.file("http://ngdc.noaa.gov/eog/data/GDP/GDP_grid_flt.tif.gz", "Downloaded_Data/GDP_grid_flt.tif.gz")
gunzip("Downloaded_Data/GDP_grid_flt.tif.gz", destname="Downloaded_Data/GDP_grid_flt.tif")
RASTERgdp <- raster("Downloaded_Data/GDP_grid_flt.tif")
unlink("Downloaded_Data/GDP_grid_flt.tif")
download.file("http://download.geonames.org/export/dump/cities1000.zip", "Downloaded_Data/GDP_grid_flt.tif.gz")
gunzip("Downloaded_Data/GDP_grid_flt.tif.gz", destname="Downloaded_Data/worldcitiespop1000.csv")
_
Downloaded_Data/cities1000.zip
download.file("http://download.geonames.org/export/dump/cities1000.zip", "Downloaded_Data/cities1000.zip")
gunzip("Downloaded_Data/cities1000.zip", destname="Downloaded_Data/worldcitiespop1000.csv")
worldcities1000 <- read.csv("Downloaded_Data/worldcitiespop1000.csv")
View(worldcities1000)
download.file("http://download.geonames.org/export/dump/cities1000.zip", "Downloaded_Data/cities1000.zip")
gunzip("Downloaded_Data/cities1000.zip", destname="Downloaded_Data/worldcitiespop1000.csv")
download.file("http://download.geonames.org/export/dump/cities1000.zip", "Downloaded_Data/cities1000.zip")
gunzip("Downloaded_Data/cities1000.zip", destname="Downloaded_Data/worldcitiespop1000.csv")
worldcities1000 <- read.csv("Downloaded_Data/worldcitiespop1000.csv")
download.file("http://download.geonames.org/export/dump/cities1000.zip", "Downloaded_Data/cities1000.zip")
unzip("Downloaded_Data/cities1000.zip")
unzip("Downloaded_Data/cities1000.zip")
download.file("https://www.dropbox.com/s/a6zza8m9ehi573g/NLDI_2006_0p25_rev20111230.tif",
"Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
download.file("https://www.dropbox.com/s/a6zza8m9ehi573g/NLDI_2006_0p25_rev20111230.tif",
"Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
download.file("https://dl.dropboxusercontent.com/u/4001071/Raster%20Backup/NLDI_2006_0p25_rev20111230.tif",
"Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
download.file("https://dl.dropboxusercontent.com/u/4001071/Raster%20Backup/NLDI_2006_0p25_rev20111230.tif",
"Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
RASTERnldi <- raster("Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
download.file("https://dl.dropboxusercontent.com/u/4001071/Raster%20Backup/Downloaded_Data/LNMDMS2a.tif",
"Downloaded_Data/Downloaded_Data/LNMDMS2a.tif")
download.file("https://dl.dropboxusercontent.com/u/4001071/Raster%20Backup/Downloaded_Data/LNMDMS2a.tif",
"Downloaded_Data/LNMDMS2a.tif")
download.file("https://dl.dropboxusercontent.com/u/4001071/Raster%20Backup/LNMDMS2a.tif",
"Downloaded_Data/LNMDMS2a.tif")
setwd("C:/Users/Lokus/Dropbox/UrbanTerror")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "rtiff", "httr", "iterators", "dplyr", "plyr",
"stargazer", "rgdal", "sp", "dismo","XML", "maps", "ggmap", "Imap", "geonames", "GSIF", "tiff",
"raster", "gdalUtils","geosphere", "maptools", "rgeos", "foreach", "DataCombine")
ipak(packages)
rm(packages)
rm(ipak)
##########  Package Loading  ###########
#Loading all required packages for the UrbanTerror Project using @stevenworthington's ipak.R gist from https://gist.github.com/stevenworthington/3178163.
# ipak function: install and load multiple R packages.
# check to see if packages are installed. Install them if they are not, then load them into the R session.
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "rtiff", "httr", "iterators", "dplyr", "plyr",
"stargazer", "rgdal", "sp", "dismo","XML", "maps", "ggmap", "Imap", "geonames", "GSIF", "tiff",
"raster", "gdalUtils","geosphere", "maptools", "rgeos", "foreach", "DataCombine", "R.utils")
ipak(packages)
rm(packages)
rm(ipak)
download.file("https://dl.dropboxusercontent.com/u/4001071/Raster%20Backup/NLDI_2006_0p25_rev20111230.tif",
"Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
RASTERnldi <- raster("Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
gunzip("Downloaded_Raster_Data.zip", destname="Downloaded_Data/test/GDP_grid_flt.tif")
gunzip("Downloaded_Data/Downloaded_Raster_Data.zip", destname="Downloaded_Data/test/GDP_grid_flt.tif")
gunzip("Downloaded_Data/Downloaded_Raster_Data.zip", destname="Downloaded_Data/test/")
gunzip("Downloaded_Data/Downloaded_Raster_Data.zip", destname="Downloaded_Data/test/")
gunzip("Downloaded_Data/Downloaded_Data - Copy.zip", destname="Downloaded_Data/test/")
gunzip("Downloaded_Data/Downloaded_Data - Copy.zip", destname="Downloaded_Data/test")
unzip("Downloaded_Data/Downloaded_Data - Copy.zip", exdir="Downloaded_Data/test")
unzip("Downloaded_Data/Downloaded_Raster_Data.zip", exdir="Downloaded_Data/")
unzip("Downloaded_Data/Downloaded_Raster_Data.zip", exdir="Downloaded_Data")
unzip("TerrorData/globalterrorismdb_0814dist.zip", exdir="TerrorData")
rawGTD <- read.csv("TerrorData/globalterrorismdb_0814dist.csv", header=TRUE)
unlink("TerrorData/globalterrorismdb_0814dist.csv)
unlink("TerrorData/globalterrorismdb_0814dist.csv")
unzip("Downloaded_Data/worldcitiespop1000.zip", exdir="Downloaded_Data")
worldcities1000 <- read.csv("Downloaded_Data/worldcitiespop1000.csv")
unlink("Downloaded_Data/worldcitiespop1000.csv")
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.csv.gis")} else{source("1.c - City Data.R")}
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.gis.csv")} else{source("1.c - City Data.R")}
# Global Terrorism Database (GTD) with some new scales and categories we introduced to the GTD for our purposes
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# Global Terrorism Database (GTD) with some new scales and categories we introduced to the GTD for our purposes
if(file.exists("Cache/GTD.csv")) {GTD <- read.csv("Cache/GTD.csv")} else{source("1.a - Global Terrorism Database.R")}
# Country level data from the World Bank Development Indicators (WDI) and the The Correlates of War (COW) project data on wars.
if(file.exists("Cache/CountryData.csv")){CountryData <- read.csv("Cache/CountryData.csv")} else{source("1.b - Country Data.R")}
# City level data from a number of sources, including web scraping
if(file.exists("Cache/WC.UC.dist.csv")) {WC.UC.dist <- read.csv("Cache/WC.UC.dist.gis.csv")} else{source("1.c - City Data.R")}
###### Merge City and Country Data ######
# create merge variable
WC.UC.dist["merge"] <- paste(WC.UC.dist$country.etc, WC.UC.dist$old.name, sep="")
WC.UC.dist <- WC.UC.dist[order(WC.UC.dist$merge, WC.UC.dist$capital, -WC.UC.dist$pop),]
WC.UC.dist <- WC.UC.dist[!duplicated(WC.UC.dist$merge), ]
X <- WC.UC.dist
# create all missing years in the city data artificially
X["start"] <- 1970
X["end"] <- 2013
X <- TimeFill(X, GroupVar = 'merge', StartVar = 'start', EndVar = 'end')
X$TimeFilled <- NULL
# merge city and country data
WC.UC.full<- merge(X, WC.UC.dist, by=c("merge"), all.x=TRUE)
WC.UC.full <- merge(WC.UC.full, CountryData, by.x=c("country.etc", "Time"), by.y=c("country", "year"), all.x=TRUE, sort=TRUE)
rm(X)
# minor cleanups
WC.UC.full$part.of.urban.center[is.na(WC.UC.full$part.of.urban.center)] <- FALSE
WC.UC.full$in.urban.centers.environment[is.na(WC.UC.full$in.urban.centers.environment)] <- FALSE
WC.UC.full$in.urban.centers.environment <- recode(WC.UC.full$in.urban.centers.environment, "TRUE=1")
WC.UC.full$part.of.urban.center <- recode(WC.UC.full$part.of.urban.center, "TRUE=1")
WC.UC.full$largestC[is.na(WC.UC.full$largestC)] <- 0
WC.UC.full$largest.UC[is.na(WC.UC.full$largest.UC)] <- 0
###### Change City Size on yearly basis with WDi data and introduce relative city size (Rel.CS) ######
# prepare
G2<-WC.UC.full
G2$SP.URB.TOTL <- as.numeric(G2$SP.URB.TOTL )
G2$MAX.URB.TOTL <- as.numeric(G2$MAX.URB.TOTL)
G2$EN.URB.MCTY <- as.numeric(G2$EN.URB.MCTY)
G2$MAX.URB.MCTY <- as.numeric(G2$MAX.URB.MCTY)
G2$EN.URB.LCTY.UR <- as.numeric(G2$EN.URB.LCTY.UR)
G2$MAX.URB.LCTY.UR <- as.numeric(G2$MAX.URB.LCTY.UR)
G2$WC.UC.dist.km <- as.numeric(G2$WC.UC.dist.km)
G2$Area <- as.numeric(G2$Area)
G2["year"] <- as.numeric(G2$Time)
G2["pop.2013"] <- as.numeric(G2$pop)
G2$old.pop <- G2$pop
G2$pop <- NULL
# Area Manipulation for UC's, in order to account for growing urban centers incorporating less in the past
G2$Area <-ifelse(G2$largest.UC==1 & !is.na(G2$EN.URB.LCTY.UR) & !is.na(G2$MAX.URB.LCTY.UR)  & (G2$EN.URB.LCTY.UR/G2$MAX.URB.LCTY.UR)<=1 &
(G2$EN.URB.LCTY.UR/G2$MAX.URB.LCTY.UR)>=0.05, (G2$EN.URB.LCTY.UR/G2$MAX.URB.LCTY.UR*G2$Area), G2$Area)
G2$Area <-ifelse(G2$largest.UC==0 & (((G2$EN.URB.MCTY - G2$EN.URB.LCTY.UR)/(G2$MAX.URB.MCTY - G2$MAX.URB.LCTY.UR))<=1)&
(((G2$EN.URB.MCTY - G2$EN.URB.LCTY.UR)/(G2$MAX.URB.MCTY - G2$MAX.URB.LCTY.UR))>=0.05) &
!is.na((G2$EN.URB.MCTY - G2$EN.URB.LCTY.UR)/(G2$MAX.URB.MCTY - G2$MAX.URB.LCTY.UR)),
((G2$EN.URB.MCTY - G2$EN.URB.LCTY.UR)/(G2$MAX.URB.MCTY - G2$MAX.URB.LCTY.UR)*G2$Area), G2$Area)
# re-answering the question again, if a city is part of an UC, now with new Area estimates of all UCs
G2["inUC"] <- ifelse((G2$WC.UC.dist.km <= (15+(((G2$Area)/pi)**0.5))), 1, 0) # 20km + radius of UC as circle
G2["aroundUC"] <- ifelse((G2$WC.UC.dist.km <= (30+(((G2$Area)/pi)**0.5))), 1, 0) # 40km + radius of UC as circle
G2$inUC[is.na(G2$inUC)]<- 0
G2$name <- ifelse((G2$inUC==1), G2$name, G2$old.name)
#in case we only have very limited numers on the country population, we put in some first assumptions based on total population
# and UC population
G2["city.population_with_time"] <- ifelse(G2$inUC==1, G2$Population, G2$pop.2013)
G2$city.population_with_time <- ifelse(!is.na(G2$SP.POP.TOTL), G2$pop.2013*G2$SP.POP.TOTL/G2$MAX.POP.TOTL, G2$city.population_with_time)
#in case we only have URB.POP numers, we assume that all cities grew with those numbers each year
G2$city.population_with_time <- ifelse(!is.na(G2$SP.URB.TOTL), G2$pop.2013*G2$SP.URB.TOTL/G2$MAX.URB.TOTL, G2$city.population_with_time)
# if it is the largest city, EN.URB.LCTY.UR is the size estimator for each year
G2$city.population_with_time <-ifelse((G2$inUC==0 & G2$largestC==1 & !is.na(G2$EN.URB.LCTY.UR))|
(G2$inUC==1 & G2$largest.UC==1 & !is.na(G2$EN.URB.LCTY.UR)),
G2$EN.URB.LCTY.UR, G2$city.population_with_time)
# if it is a city with less than 1mil, SP.URB.TOTL minus EN.URB.MCTY is the size estimator for each year
G2$city.population_with_time <- ifelse(G2$city.population_with_time!=G2$EN.URB.LCTY.UR
& G2$pop.2013<=999999
& G2$EN.URB.MCTY <= G2$SP.URB.TOTL & G2$MAX.URB.MCTY <= G2$MAX.URB.TOTL
& !(((G2$SP.URB.TOTL-G2$EN.URB.MCTY)/(G2$MAX.URB.TOTL-G2$MAX.URB.MCTY)
*G2$city.population_with_time)>=G2$EN.URB.LCTY.UR)
& !(((G2$SP.URB.TOTL-G2$EN.URB.MCTY)/(G2$MAX.URB.TOTL-G2$MAX.URB.MCTY))<=0)
& !is.na(G2$EN.URB.MCTY) & G2$MAX.URB.TOTL!=0 & G2$MAX.URB.MCTY!=0
& !is.na(G2$EN.URB.LCTY.UR) & !is.na(G2$SP.URB.TOTL),
((G2$SP.URB.TOTL-G2$EN.URB.MCTY)/(G2$MAX.URB.TOTL-G2$MAX.URB.MCTY)
*G2$city.population_with_time), (G2$city.population_with_time))
# if it is a city with more than 1mil, EN.URB.MCTY minus EN.URB.LCTY.UR is the size estimator for each year
G2$city.population_with_time <- ifelse(G2$city.population_with_time!=G2$EN.URB.LCTY.UR & G2$pop.2013>=999999
& !(((G2$EN.URB.MCTY-G2$EN.URB.LCTY.UR)/
(G2$MAX.URB.MCTY-G2$MAX.URB.LCTY.UR))<=0)
& !(((G2$EN.URB.MCTY-G2$EN.URB.LCTY.UR)/
(G2$MAX.URB.MCTY-G2$MAX.URB.LCTY.UR)
*G2$city.population_with_time)>=G2$EN.URB.LCTY.UR)
& !is.na(G2$EN.URB.MCTY) & !is.na(G2$EN.URB.LCTY.UR) & G2$MAX.URB.MCTY!=0,
((G2$EN.URB.MCTY-G2$EN.URB.LCTY.UR)/(G2$MAX.URB.MCTY-G2$MAX.URB.LCTY.UR)
*G2$city.population_with_time), G2$city.population_with_time)
# some final cleaning of minor leftovers
G2$city.population_with_time <- ifelse(!G2$city.population_with_time<=G2$EN.URB.LCTY.UR & G2$largestC==1,
G2$EN.URB.LCTY.UR, G2$city.population_with_time)
G2$city.population_with_time <- ifelse(!G2$city.population_with_time<=G2$EN.URB.LCTY.UR & G2$largestC==0,
runif(1, (G2$EN.URB.LCTY.UR/10), G2$EN.URB.LCTY.UR), G2$city.population_with_time)
###### introduce some new variable, because finally we can ######
# introducing relative city size to countries largest city
G2["Rel.CS"] <- G2$city.population_with_time/G2$EN.URB.LCTY.UR
# rename the new population estimate
G2["pop.that.year"] <-  round(G2$city.population_with_time)
# introducing yearly population size rank of each city within its country into the city data
G2["mergerr"] <-data.frame(paste(G2$country.etc, G2$name, G2$year, sep=""))
GX <- G2
GX <- GX[order(GX$mergerr, GX$capital, -GX$pop.that.year),]
GX <- GX[!duplicated(GX$mergerr), ]
GXX <- GX[order(GX$country.etc, GX$year, -GX$pop.that.year, -GX$long),]
GXX["RANK.Country"] <- unlist(with(GXX, tapply(-pop.that.year, list(Time, country.etc), function(x) rank(x, ties.method= "min"))))
GXX <- subset(GXX, select=c(mergerr, RANK.Country), row.names=NULL)
G2 <- merge(G2, GXX, by=c("mergerr"), all.x=TRUE)
rm(GXX)
# put the maxium rank per year and country in the GTD
Rank.Country.MAX<-aggregate(G2$RANK.Country, by=list(G2$year, G2$country.etc), FUN=max)
colnames(Rank.Country.MAX)[1] <- "iyear"
colnames(Rank.Country.MAX)[2] <- "country_txt"
colnames(Rank.Country.MAX)[3] <- "Rank.C.MAX"
GTDr <- merge(GTD, Rank.Country.MAX, by=c("iyear", "country_txt"), all.x=TRUE)
rm(Rank.Country.MAX)
# introducing yearly population size rank of each city in the world comparasion
GXX<- GX[order(GX$year, -GX$pop.that.year),]
GXX["RANK.World"] <-unlist(with(GXX, tapply(-pop.that.year, year, function(x) rank(x, ties.method= "min"))))
GXX <- subset(GXX, select=c(mergerr, RANK.World), row.names=NULL)
G2 <- merge(G2, GXX, by=c("mergerr"), all.x=TRUE)
G2$mergerr <- NULL
rm(GXX,GX)
# put the maxium rank per year in the GTD
Rank.World.MAX<-aggregate(G2$RANK.World, by=list(G2$year), FUN=max)
colnames(Rank.World.MAX)[1] <- "iyear"
colnames(Rank.World.MAX)[2] <- "Rank.W.MAX"
GTDr <- merge(GTDr, Rank.World.MAX, by=c("iyear"), all.x=TRUE)
rm(Rank.World.MAX)
WC.UC.full<-G2
rm(G2)
###### Merge combined set with GTD ######
# merge
GTD2 <- merge(GTDr, CountryData, by.x=c("country_txt", "iyear"), by.y=c("country", "year"), all.x=TRUE, sort=TRUE)
rm(GTDr)
WC.UC.merge <- WC.UC.full$merge
WC.UC.time <- WC.UC.full$Time
WC.UC.full["merge2"] <- paste(WC.UC.merge, WC.UC.time, sep="")
GTDcity <- GTD2$city
GTDcountry <- GTD2$country_txt
GTDyear <-GTD2$iyear
GTD2["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
GTD2["merge2"] <-data.frame(paste(GTDcountry, GTDcity, GTDyear, sep=""))
WC.UC.full$Extra.WAR.In <- NULL
WC.UC.full$Extra.WAR.Out <- NULL
WC.UC.full$Intra.WAR <- NULL
WC.UC.full$Inter.WAR <- NULL
WC.UC.full$EN.POP.DNST <- NULL
WC.UC.full$EN.RUR.DNST <- NULL
WC.UC.full$SP.RUR.TOTL <- NULL
WC.UC.full$SP.RUR.TOTL.ZG <- NULL
WC.UC.full$SP.RUR.TOTL.ZS <- NULL
WC.UC.full$EN.URB.LCTY.UR <- NULL
WC.UC.full$MAX.URB.TOTL <- NULL
WC.UC.full$MAX.URB.MCTY <- NULL
WC.UC.full$MAX.URB.LCTY.UR <- NULL
WC.UC.full$MAX.POP.TOTL <- NULL
WC.UC.full$iso2c <- NULL
WC.UC.full$EN.URB.LCTY.UR.ZS <- NULL
WC.UC.full$EN.URB.MCTY <- NULL
WC.UC.full$EN.URB.MCTY.TL.ZS <- NULL
WC.UC.full$SP.URB.GROW <- NULL
WC.UC.full$SP.URB.TOTL <- NULL
WC.UC.full$SP.POP.TOTL <- NULL
WC.UC.full$SP.URB.TOTL.IN.ZS <- NULL
WC.UC.full$EN.POP.DNST <- NULL
WC.UC.full$EN.RUR.DNST <- NULL
WC.UC.full$SP.RUR.TOTL <- NULL
WC.UC.full$SP.RUR.TOTL.ZG <- NULL
WC.UC.full$SP.RUR.TOTL.ZS <- NULL
WC.UC.full$EN.URB.LCTY.UR <- NULL
PreGTD <- merge(GTD2, WC.UC.full, by=c("merge2"), all.x=TRUE)
PreGTD  <- PreGTD [order(-PreGTD$HUMscale, na.last=TRUE) , ]
# bring the lat lon data together from both the GTD and the city data sets
PreGTD$latitude <- ifelse(is.na(PreGTD$latitude), as.numeric(PreGTD$lat), as.numeric(PreGTD$lat))
PreGTD$longitude <- ifelse(is.na(PreGTD$longitude), as.numeric(PreGTD$long), as.numeric(PreGTD$long))
# Introduce loged ranks
PreGTD["Rank01.C"] <-((((PreGTD$RANK.Country-1)/(PreGTD$Rank.C.MAX-1))-1)*-1)
PreGTD["Rank01.W"] <-((((PreGTD$RANK.World-1)/(PreGTD$Rank.W.MAX-1))-1)*-1)
# better names before subsetting
PreGTD["GTD.city"] <- PreGTD$city
PreGTD["WCUC.city.old"] <- PreGTD$old.name
PreGTD["WCUC.city"] <- PreGTD$name
PreGTD["merge"]<- PreGTD$merge.x
View(PreGTD)
# limit and order the new PreGTD
PreGTD <- subset(PreGTD, select=c(eventid, iyear, imonth, iday, country_txt, region_txt, GTD.city, WCUC.city, WCUC.city.old,
latitude, longitude, pop.that.year, Rel.CS, inUC, aroundUC, RANK.Country, Rank.C.MAX, Rank01.C,
RANK.World, Rank.W.MAX, Rank01.W, capital, largestC, Closest.Urban.Center,largest.UC,
coastalMC, WC.UC.dist.km, attacktype1, targtype1, targsubtype1, weaptype1, weapsubtype1,
TUPscale, PROPscale, HUMscale, Extra.WAR.In, Extra.WAR.Out, Intra.WAR, Inter.WAR, old.pop,
merge, original.city, coast.dist, coast.dist.MIN, access, access.MIN, light, LIGHT.MAX, nldi
nldi.MAX, city.gdp, gdp.MAX, dens.90, dens.90.MAX, dens.95, dens.95.MAX, dens.00, dens.00.MAX,
dens.05, dens.05.MAX, dens.10, dens.10.MAX))
PreGTD <- subset(PreGTD, select=c(eventid, iyear, imonth, iday, country_txt, region_txt, GTD.city, WCUC.city, WCUC.city.old,
latitude, longitude, pop.that.year, Rel.CS, inUC, aroundUC, RANK.Country, Rank.C.MAX, Rank01.C,
RANK.World, Rank.W.MAX, Rank01.W, capital, largestC, Closest.Urban.Center,largest.UC,
coastalMC, WC.UC.dist.km, attacktype1, targtype1, targsubtype1, weaptype1, weapsubtype1,
TUPscale, PROPscale, HUMscale, Extra.WAR.In, Extra.WAR.Out, Intra.WAR, Inter.WAR, old.pop,
merge, original.city, coast.dist, coast.dist.MIN, access, access.MIN, light, LIGHT.MAX, nldi
nldi.MAX, city.gdp, gdp.MAX, dens.90, dens.90.MAX, dens.95, dens.95.MAX, dens.00, dens.00.MAX, dens.05, dens.05.MAX, dens.10, dens.10.MAX))
PreGTD <- subset(PreGTD, select=c(eventid, iyear, imonth, iday, country_txt, region_txt, GTD.city, WCUC.city, WCUC.city.old,
latitude, longitude, pop.that.year, Rel.CS, inUC, aroundUC, RANK.Country, Rank.C.MAX, Rank01.C,
RANK.World, Rank.W.MAX, Rank01.W, capital, largestC, Closest.Urban.Center,largest.UC,
coastalMC, WC.UC.dist.km, attacktype1, targtype1, targsubtype1, weaptype1, weapsubtype1,
TUPscale, PROPscale, HUMscale, Extra.WAR.In, Extra.WAR.Out, Intra.WAR, Inter.WAR, old.pop,
merge, original.city, coast.dist, coast.dist.MIN, access, access.MIN, light, LIGHT.MAX, nldi, nldi.MAX, city.gdp, gdp.MAX, dens.90, dens.90.MAX, dens.95, dens.95.MAX, dens.00, dens.00.MAX, dens.05, dens.05.MAX, dens.10, dens.10.MAX))
View(PreGTD)
# fill rural atacks (= no city found) with respective data
PreGTD$coastalMC[is.na(PreGTD$coastalMC)] <- 0
PreGTD$capital[is.na(PreGTD$capital)] <- 0
PreGTD$largest.UC[is.na(PreGTD$largest.UC)] <- 0
PreGTD$TUPscale[is.na(PreGTD$TUPscale)] <- 0
PreGTD$PROPscale[is.na(PreGTD$PROPscale)] <- 0
PreGTD$HUMscale[is.na(PreGTD$HUMscale)] <- 0
PreGTD$Extra.WAR.In[is.na(PreGTD$Extra.WAR.In)] <- 0
PreGTD$Extra.WAR.Out[is.na(PreGTD$Extra.WAR.Out)] <- 0
PreGTD$Intra.WAR[is.na(PreGTD$Intra.WAR)] <- 0
PreGTD$Inter.WAR[is.na(PreGTD$Inter.WAR)] <- 0
PreGTD$Rel.CS[is.na(PreGTD$Rel.CS)] <- 0
PreGTD$Rank01.C[is.na(PreGTD$Rank01.C)] <- 0
PreGTD$Rank01.W[is.na(PreGTD$Rank01.W)] <- 0
PreGTD$inUC[is.na(PreGTD$inUC)] <- 0
PreGTD$aroundUC[is.na(PreGTD$aroundUC)] <- 0
PreGTD$RANK.Country <- ifelse(is.na(PreGTD$RANK.Country), as.numeric(PreGTD$Rank.Country.MAX), PreGTD$RANK.Country)
PreGTD$RANK.World <- ifelse(is.na(PreGTD$RANK.World), as.numeric(PreGTD$Rank.World.MAX), PreGTD$RANK.World)
# write a csv, just to be sure
write.csv(PreGTD, file="TerrorData/Pregtd.csv")
rm(WC.UC.merge, WC.UC.time, GTDcountry, GTDcity, GTDyear, GTD2, WC.UC.full)
