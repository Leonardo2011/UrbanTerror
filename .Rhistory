GTD2$country_txt[GTD2$country_txt == "Macau" ] <- "Macao SAR, China"
GTD2$country_txt[GTD2$country_txt == "Macedonia" ] <- "Macedonia, FYR"
GTD2$country_txt[GTD2$country_txt == "Martinique" ] <- ""
GTD2$country_txt[GTD2$country_txt == "North Korea" ] <- "Korea, Dem. Rep."
GTD2$country_txt[GTD2$country_txt == "Northern Ireland" ] <- "United Kingdom"
GTD2$country_txt[GTD2$country_txt == "Rhodesia" ] <- "Zimbabwe"
GTD2$country_txt[GTD2$country_txt == "South Korea" ] <- "Korea, Rep."
GTD2$country_txt[GTD2$country_txt == "Syria" ] <- "Syrian Arab Republic"
GTD2$country_txt[GTD2$country_txt == "Taiwan" ] <- "China"
GTD2$country_txt[GTD2$country_txt == "Venezuela" ] <- "Venezuela, RB"
GTD2$country_txt[GTD2$country_txt == "Wallis and Futuna" ] <- "France"
GTD2$country_txt[GTD2$country_txt == "West Bank and Gaza Strip" ] <- "West Bank and Gaza"
GTD2$country_txt[GTD2$country_txt == "Western Sahara" ] <- "Spain"
GTD2$country_txt[GTD2$country_txt == "Yemen" ] <- "Yemen, Rep."
#Just for testing whether we eliminated all.
#GTD.sub <- subset(GTD2, GTD2$country_txt == "Soviet Union")
#liste <- data.frame(c(unique(WDIData$country)), unique(GTD2$country_txt))
GTD2$country_txt <- as.character(GTD2$country_txt)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "httr", "iterators", "dplyr", "plyr",
"XML", "maps", "ggmap", "Imap", "geosphere", "maptools", "rgeos", "foreach")
ipak(packages)
rm(packages)
rm(ipak)
########################################################################################
########################################################################################
############################   GATHERING  DATA    ######################################
########################################################################################
########################################################################################
############################################
###### The Global Terrorism Database  ######
############################################
############################################
#Load the Global Terrorism Database (GTD). It is open souce and can be downloaded after registration at
# http://www.start.umd.edu/gtd/contact/
rawGTD <- read.csv("Terror Data/globalterrorismdb_0814dist.csv", header=TRUE)
#The (GTD) contains over a 120k observations on more than 120 variables. We don't need them all.
#We therefore filter the database to make it fit our needs, erasing over a 100 variables.
#We only want to look at successfull terror attacks and include basic data on time, location and target.
GTD <- subset(rawGTD, select = c(eventid, iyear, imonth, iday, country, country_txt, region, provstate, region_txt, city, attacktype1, targtype1, targsubtype1,
weaptype1, weapsubtype1, propextent, nkill, nwound),
iyear >= 1970 & success == 1, na.strings = c("", " "))
rm(rawGTD)
GTD2 <- GTD
GTD2$country_txt <- as.character(GTD2$country_txt)
# 1. Combining formerly seperated countries
GTD2$country_txt[GTD2$country_txt == "East Germany (GDR)"] <- "Germany"
GTD2$country_txt[GTD2$country_txt == "West Germany (FRG)"] <- "Germany"
GTD2$country_txt[GTD2$country_txt == "North Yemen"] <- "Yemen"
GTD2$country_txt[GTD2$country_txt == "South Yemen"] <- "Yemen"
GTD2$country_txt[GTD2$country_txt == "Falkland Islands" ] <- "United Kingdom"
GTD2$country_txt[GTD2$country_txt == "New Hebrides" ] <- "Vanuatu"
GTD2$country_txt[GTD2$country_txt == "South Vietnam" ] <- "Vietnam"
# 2. Splitting up formerly united countries
#Since we have WDI data going back 1970 on a per country scale also for countries
#that were not independent in 1970 (like the Soviet Union countries) we can just treat the cities the attack took place as
#being part of the country they are a part of now.
# 2.1. The Soviet Union
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Yerevan" ] <- "Armenia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Meghri" ] <- "Armenia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Aygepar" ] <- "Armenia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Erubuni" ] <- "Armenia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Charektar" ] <- "Armenia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Kirovakan" ] <- "Armenia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Yevlakh" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Aterk" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Gyandzha" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Tatli" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Tallinn" ] <- "Estonia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Ikla" ] <- "Estonia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Tbilisi" ] <- "Georgia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Osh" ] <- "Kyrgyzstan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Riga" ] <- "Latvia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Ainazi" ] <- "Latvia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Lavoriskes" ] <- "Lithuania"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Birzai" ] <- "Lithuania"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Vilnius" ] <- "Lithuania"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Salociai" ] <- "Lithuania"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Medininkai" ] <- "Lithuania"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Moscow" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Buynaksk" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Kara-Su" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Novgorod" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Vasyurinskaya" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Ostankinskiy" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Grebenskaya" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Temirgoye" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Irkutsk" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Sverdlovsk" ] <- "Russia"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Leningrad" ] <- "Russia"
# 2.2. Czechoslovakia
GTD2$country_txt[GTD2$country_txt == "Czechoslovakia" & GTD2$city =="Prague" ] <- "Czech Republic"
GTD2$country_txt[GTD2$country_txt == "Czechoslovakia" & GTD2$city =="Usti Nad Labem" ] <- "Czech Republic"
GTD2$country_txt[GTD2$country_txt == "Czechoslovakia" & GTD2$city =="Halickuv Brod" ] <- "Czech Republic"
GTD2$country_txt[GTD2$country_txt == "Czechoslovakia" & GTD2$city =="Hradec Kralove" ] <- "Czech Republic"
GTD2$country_txt[GTD2$country_txt == "Czechoslovakia" & GTD2$city =="Bratislava" ] <- "Slovak Republic"
# 2.3. Serbia-Montenegro
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Bujanovac" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Zarkovo" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Presevo" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Belgrade" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Dobrosin" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Subotica" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Velki Trnovac" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Novi Pazar" ] <- "Serbia"
# 2.4. Yugoslavia
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Bogicevica" ] <- "Albania"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Banjica" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Belgrade" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Blace" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Borovica" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Bujanovac" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Bujic" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Cacak" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Cerevajka" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Dolovo" ] <- "Serbia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Celopek" ] <- "Macedonia, FYR"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Skopje" ] <- "Macedonia, FYR"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Berane" ] <- "Montenegro"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Budva" ] <- "Montenegro"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Cetinje" ] <- "Montenegro"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Ljubljana" ] <- "Slovenia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Benkovac" ] <- "Croatia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Borovac" ] <- "Croatia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Dolac"] <- "Croatia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Dubrovnik" ] <- "Croatia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Dvor na Uni" ] <- "Croatia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Osijek" ] <- "Croatia"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Batlava" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Besinje" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Bradas" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Careva Cesma" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Decani" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Djakovica" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Donje Ljupce" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Donje Prekaze" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Donji Crnobreg" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Dulje" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Glogovac" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Gornja Klina" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Grabanicâ°" ] <- "Kosovo"  ######## This may be an encoding problem
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Grabc" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Istinic" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Podujeva" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Pristina" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Suva Reka" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Titova Mitrovica" ] <- "Kosovo"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Banja Luka" ] <- "Bosnia and Herzegovina"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Bijelina" ] <- "Bosnia and Herzegovina"
GTD2$country_txt[GTD2$country_txt == "Yugoslavia" & GTD2$city =="Bosanski Brod" ] <- "Bosnia and Herzegovina"
# 3. Problematic recodings (e.g. contested regions, typos etc.)
#The following all seem to belong to the Nagorno-Karabakh region, contested by Armenia and Azerbaijan, but currently governed by
#Azerbaijan, though populated mostly by Armenians.
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Nagorno-Karabakh (Autonomous Oblast)" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Askeran" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Askeran (District)" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Khojali" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Khodzhaly" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Baganis-Airum" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="baganis-airum" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Airum Pirili" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Chaily" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Drmbon" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Stepanakert" ] <- "Azerbaijan"
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Kazakh" ] <- "Azerbaijan"
#This attack was coded as having happened in Serbia-Montenegro, but according to lang-log data, the place the attack occurred is
# in Estonia
GTD2$country_txt[GTD2$country_txt == "Serbia-Montenegro" & GTD2$city =="Levosje" ] <- "Estonia"
#These are two attacks in the early 1990s that seem to have targeted the Ararat Region outside of any city.
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Unknown" & GTD$provstate == "Armenia" ] <- "Armenia"
#It is on Crimea. We make a judgement call here and go for the country currently in charge.
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Feodocia" ] <- "Russia"
# This is Abchasia
GTD2$country_txt[GTD2$country_txt == "Soviet Union" & GTD2$city =="Sukhumi" ] <- "Georgia"
# This is one attack happening in the Gulf of Aden, off the coast of Yemen
GTD2$country_txt[GTD2$country_txt == "International" ] <- "Yemen"
# 4. Renaming Countries to make them match the WDIData
GTD2$country_txt <- as.character(GTD2$country_txt)
GTD2$country_txt[GTD2$country_txt == "Bahamas" ] <- "Bahamas, The"
GTD2$country_txt[GTD2$country_txt == "Bosnia-Herzegovina" ] <- "Bosnia and Herzegovina"
GTD2$country_txt[GTD2$country_txt == "Central African Republic" ] <- "Central African Republic"
GTD2$country_txt[GTD2$country_txt == "Congo (Brazzaville)" ] <- "Congo, Dem. Rep."
GTD2$country_txt[GTD2$country_txt == "Congo (Kinshasa)" ] <- "Congo, Rep."
GTD2$country_txt[GTD2$country_txt == "Corsica" ] <- "France"
GTD2$country_txt[GTD2$country_txt == "Czechoslovakia" ] <- ""
GTD2$country_txt[GTD2$country_txt == "Egypt" ] <- "Egypt, Arab Rep."
GTD2$country_txt[GTD2$country_txt == "French Guiana" ] <- "France"
GTD2$country_txt[GTD2$country_txt == "Gambia" ] <- "Gambia, The"
GTD2$country_txt[GTD2$country_txt == "Great Britain" ] <- "United Kingdom"
GTD2$country_txt[GTD2$country_txt == "Guadeloupe" ] <- "France"
GTD2$country_txt[GTD2$country_txt == "Hong Kong" ] <- "Hong Kong SAR, China"
GTD2$country_txt[GTD2$country_txt == "Iran" ] <- "Iran, Islamic Rep."
GTD2$country_txt[GTD2$country_txt == "Ivory Coast" ] <- "Cote d'Ivoire"
GTD2$country_txt[GTD2$country_txt == "Kyrgyzstan" ] <- "Kyrgyz Republic"
GTD2$country_txt[GTD2$country_txt == "Laos" ] <- "Lao PDR"
GTD2$country_txt[GTD2$country_txt == "Macau" ] <- "Macao SAR, China"
GTD2$country_txt[GTD2$country_txt == "Macedonia" ] <- "Macedonia, FYR"
GTD2$country_txt[GTD2$country_txt == "Martinique" ] <- ""
GTD2$country_txt[GTD2$country_txt == "North Korea" ] <- "Korea, Dem. Rep."
GTD2$country_txt[GTD2$country_txt == "Northern Ireland" ] <- "United Kingdom"
GTD2$country_txt[GTD2$country_txt == "Rhodesia" ] <- "Zimbabwe"
GTD2$country_txt[GTD2$country_txt == "South Korea" ] <- "Korea, Rep."
GTD2$country_txt[GTD2$country_txt == "Syria" ] <- "Syrian Arab Republic"
GTD2$country_txt[GTD2$country_txt == "Taiwan" ] <- "China"
GTD2$country_txt[GTD2$country_txt == "Venezuela" ] <- "Venezuela, RB"
GTD2$country_txt[GTD2$country_txt == "Wallis and Futuna" ] <- "France"
GTD2$country_txt[GTD2$country_txt == "West Bank and Gaza Strip" ] <- "West Bank and Gaza"
GTD2$country_txt[GTD2$country_txt == "Western Sahara" ] <- "Spain"
GTD2$country_txt[GTD2$country_txt == "Yemen" ] <- "Yemen, Rep."
#Just for testing whether we eliminated all.
#GTD.sub <- subset(GTD2, GTD2$country_txt == "Soviet Union")
#liste <- data.frame(c(unique(WDIData$country)), unique(GTD2$country_txt))
write.csv(GTD2, file="GTD2.csv")
# create uniform country names like in the other datasets without special characters
X <- GTD2$country_txt
source('SmallScripts/delete_country_special_characters.R')
GTD2$country_txt <- X
rm(X)
View(GTD2)
GTD <- GTD2
#testbed to write a pre-gtd
X <- GTD$city
source('CityCleaning.R')
WC.UC.dist <- WC09.UCdist
#testbed to write a pre-gtd
X <- GTD$city
source('CityCleaning.R')
X <-gsub("NA", NA, X)
GTDcity <- X
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
GTDcountry <- Y
t.world.cities <-world.cities
X<-t.world.cities$name
X <- gsub("\\,.*","",X)
X <- gsub("\\-","",X)
X <- gsub("\\'","",X)
X <- gsub("\\-","",X)
t.world.cities$country.etc<- gsub("\\'","",t.world.cities$country.etc)
t.world.cities$name<-X
world.cities$CityID <- NULL
Testframe <- GTD[1|2|9|11:20]
Testframe["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
WC.UC.dist$merge <- paste(WC.UC.dist$country.etc, WC.UC.dist$name, sep="")
PreGTD <- merge(Testframe, WC.UC.dist, by=c("merge"), all.x=TRUE)
PreGTD$merge <- NULL
PreGTD$iday <- NULL
PreGTD$country <- NULL
PreGTD$region <- NULL
PreGTD$provstate <- NULL
PreGTD$imonth<- NULL
PreGTD$name<- NULL
PreGTD$country.etc<- NULL
PreGTD$lat<- NULL
PreGTD$long<- NULL
PreGTD$Region<- NULL
PreGTD$country.etc<- NULL
write.csv(PreGTD, file="pregtd.csv")
rm(Testframe, t.world.cities, GTDcity, GTDcountry, X, Y)
View(PreGTD)
View(world.cities)
View(world.cities)
# MPP-E1180: Introduction to Collaborative Social Science Data Analysis
### Fall 2014
### Instructor: Christopher Gandrud
############################
####### URBAN TERROR #######
############################
###### Part 1: Data   ######
############################
#Lukas B Cameron R Sascha S#
############################
###### Cleaning Data  ######
############################
#Loading R packages using @stevenworthington's ipak.R gist from https://gist.github.com/stevenworthington/3178163.
# ipak function: install and load multiple R packages.
# check to see if packages are installed. Install them if they are not, then load them into the R session.
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "httr", "iterators", "dplyr", "plyr",
"XML", "maps", "ggmap", "Imap", "geosphere", "maptools", "rgeos", "foreach")
ipak(packages)
rm(packages)
rm(ipak)
########################################################################################
########################################################################################
############################   GATHERING  DATA    ######################################
########################################################################################
########################################################################################
############################################
###### The Global Terrorism Database  ######
############################################
############################################
#Load the Global Terrorism Database (GTD). It is open souce and can be downloaded after registration at
# http://www.start.umd.edu/gtd/contact/
rawGTD <- read.csv("Terror Data/globalterrorismdb_0814dist.csv", header=TRUE)
#The (GTD) contains over a 120k observations on more than 120 variables. We don't need them all.
#We therefore filter the database to make it fit our needs, erasing over a 100 variables.
#We only want to look at successfull terror attacks and include basic data on time, location and target.
GTD <- subset(rawGTD, select = c(eventid, iyear, imonth, iday, country, country_txt, region, provstate, region_txt, city, attacktype1, targtype1, targsubtype1,
weaptype1, weapsubtype1, propextent, nkill, nwound),
iyear >= 1970 & success == 1, na.strings = c("", " "))
rm(rawGTD)
#Next we order the GTD)
GTD <- GTD[order (GTD$country_txt, GTD$iyear, GTD$imonth, GTD$iday, GTD$city), ]
############################################
#We introduce our first scale: "Targets Urbanity Potential Scale (TUPscale)"
GTD["TUPscale"] <- GTD$targsubtype1
GTD$TUPscale <- recode(GTD$TUPscale, "40:42 = 9; 9 = 0; 27:35 = 0; 37:39 = 0; 65 = 0; 72 = 0; 1 = 2; 4:5 = 2; 10 = 2;
12 = 2; 53:56 = 2; 58:59 = 2; 61:62 = 2; 82 = 2; 95:96 = 2;6 = 9; 13 = 9; 104:108 = 9;
51:52 = 9; 57 = 9; 60 = 9; 63:64 = 9; 73 = 9; 80:81 = 9; 88:92 = 9; 98 = 9; 2 = 7; 3 = 7;
7:8 = 7; 44 = 7; 48:50 = 7; 67:71 = 7; 74:79 = 7; 83:87 = 7; 97 = 7; 99 = 7; 14:26 = 9;
100:103 = 9; 111 = 9; 109 = 9; 110 = 9; 36 = 9; 43 = 9; 45:47 = 9; 66 = 9; 93:94 = 9;
11 = 9", as.numeric.result=TRUE)
# 0= Rural & Military; 2= Government & Police; 3= Potentilly Urban Workplace; #7= Potentilly Urban Infrastructure;
# 9= Potentilly Expression of Urban Core Life
############################################
# We introduce our second scale: "Extent of Property Damage (PROPscale)" and write it back into the GTD
GTD["PROPscale"] <- GTD$propextent
GTD$PROPscale <- as.numeric(GTD$PROPscale)
#Bring the values to the $ values coded in the originally coded categories.
GTD$PROPscale <- recode(GTD$PROPscale, "1=1000000000; 2=1000000; 3=1000; 4=0; NA=NA")
############################################
# We introduce our third scale: "Extent of Human Damage (HUMscale)" which adds wounded and killed /and write it back into the GTD
GTD["HUMscale"] <- GTD$nkill+GTD$nwound
GTD$HUMscale <- as.numeric(GTD$HUMscale)
###########################################
################ CITY DATA ################
###########################################
###########################################
# WORLD CITY DATASET 1/2 (worldcities2013)
# here: http://download.maxmind.com/download/worldcities/worldcitiespop.txt.gz and transformed into CSV
worldcities2013 <- read.csv("City Data/worldcitiespop.csv")
# introduce Tehran as it was missing in the original dataset
worldcities2013 <- rbind(worldcities2013, data.frame(X=0,Country="ir", City="tehran", AccentCity="Tehran",
Region= 1, Latitude=35.67, Longitude=51.43,Population=7160094))
# introduce Akkaraipattu as it was missing in the original dataset
worldcities2013 <- rbind(worldcities2013, data.frame(X=0,Country="lk", City="Akkaraipattu", AccentCity="Akkaraipattu",
Region= 31, Latitude=7.227862, Longitude=81.850551,Population=35000))
# sorting by population
worldcities2013 <- worldcities2013[order(-worldcities2013$Population, na.last=TRUE) , ]
# replace 2digit coountry names by the names used in the secon city dataset
source('SmallScripts/2digit2ctry.R')
worldcities2013$City <- gsub(" ", "", worldcities2013$City)
worldcities2013$City <- tolower(worldcities2013$City)
##########################################
# WORLD CITY DATASET 2/2 (world.cities2009)
### list the world capital cities
data(world.cities)
world.cities$name <- tolower(world.cities$name)
world.cities2009 <- world.cities[order(-world.cities$pop, na.last=TRUE) , ]
rm(world.cities)
#The dataframe wrongly lists dehli as not being the capital of india, plus had a typo in seoul, which both we recode.
world.cities2009$capital[world.cities2009$name == "delhi" & world.cities2009$country.etc == "India"] <- "1"
world.cities2009$name[world.cities2009$name == "soul" & world.cities2009$country.etc == "Korea South"] <- "seoul"
# remane some countries so they match the first city dataset better
world.cities2009$country.etc[world.cities2009$country.etc == "Russia"] <- "Russian Federation"
world.cities2009$country.etc[world.cities2009$country.etc == "UK"] <- "United Kingdom"
world.cities2009$country.etc[world.cities2009$country.etc == "USA"] <- "United States of America"
world.cities2009$country.etc[world.cities2009$country.etc == "Korea North"] <- "Korea, Democratic People's Republic of"
world.cities2009$country.etc[world.cities2009$country.etc == "Korea South"] <- "Korea, Republic of"
world.cities2009$country.etc[world.cities2009$country.etc == "Sicily"] <- "Italy"
world.cities2009$country.etc[world.cities2009$country.etc == "East Timor"] <- "Timor-Leste"
world.cities2009$country.etc[world.cities2009$country.etc == "Madeira"] <- "Portugal"
world.cities2009$country.etc[world.cities2009$country.etc == "Madiera"] <- "Portugal"
##############################################################################################
# merge the two sets: cities 2013 and cities 2009 to world.cities
#some preliminary cleaning before merging
world.cities2009$name <- gsub(" ", "", world.cities2009$name)
world.cities2009$name <- tolower(world.cities2009$name)
world.cities2009$country.etc<-gsub(" ", "",world.cities2009$country.etc, ignore.case=TRUE)
world.cities2009$country.etc<-gsub("\\,", "",world.cities2009$country.etc, ignore.case=TRUE)
world.cities2009$country.etc <- tolower(world.cities2009$country.etc)
worldcities2013$Country <- tolower(worldcities2013$Country)
# subsets and renaming so the two datasets match in their columns
worldcities2013 <- subset(worldcities2013, select =c("City", "Country", "Population", "Latitude", "Longitude", "Region"))
colnames(worldcities2013)[1] <- "name"
colnames(worldcities2013)[2] <- "country.etc"
colnames(worldcities2013)[3] <- "pop"
colnames(worldcities2013)[4] <- "lat"
colnames(worldcities2013)[5] <- "long"
#create a column to merge over: countrycity
world.cities2009$merge <- paste(world.cities2009$country.etc, world.cities2009$name, sep="")
worldcities2013$merge <- paste(worldcities2013$country.etc, worldcities2013$name, sep="")
#merge to new set: "world.cities"
world.cities <- merge(world.cities2009, worldcities2013, by= c("merge", "name", "country.etc", "pop", "lat", "long"), all=TRUE)
world.cities <- world.cities[order(world.cities$merge, world.cities$capital, world.cities$pop),]
world.cities <- world.cities[!duplicated(world.cities$merge), ]
world.cities$merge <-NULL
world.cities <- world.cities[order(-world.cities$pop), ]
rm(worldcities2013, world.cities2009)
# bring country names in combined world.cities to WDi standart
source('SmallScripts/bring_country_names_in_citydata_to_WDI.R')
# create uniform country names in world.cities without special characters and lowcase
X <- world.cities$country.etc
source('SmallScripts/delete_country_special_characters.R')
world.cities$country.etc <- X
rm(X)
#########################################
########## URBAN CENTERS DATA ###########
#########################################
# Scrap Wiki on urban Centers
URL <- 'http://en.wikipedia.org/w/index.php?title=List_of_urban_areas_by_population&section=2'
table <- readHTMLTable(URL, encoding = "UTF-16")
UrbanCenters <- table [[2]]
UrbanCenters$City <- as.character(UrbanCenters$City)
#clean up the Urban Centers name in order to allow google.maps API to find them
UrbanCenters$City <- gsub("\\xc3\xb3","o", perl=TRUE, UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.*","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\[.+?\\]","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.+?\\)","", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:digit:]]", "", UrbanCenters$City)
UrbanCenters$City <- gsub("\\xe2\x80\x93.*","", perl=TRUE, UrbanCenters$City)
UrbanCenters$City <- gsub("Region", "", UrbanCenters$City)
UrbanCenters$City <- gsub("Greater ", "", UrbanCenters$City)
# put together a string with "Country, City" to allow google.maps API to find them
b <-data.frame(paste(UrbanCenters$Country, UrbanCenters$City, sep=", "), row.names = NULL)
b["loc"] <- b
b$loc <- as.character(b$loc)
b$loc <- gsub("^..", "", b$loc)
a<-(b$loc)
# look up lon/lat data via google maps :: the geocode function of the package maps
UrbanLoc <- geocode(a, output = c("latlon", "latlona", "more", "all"),messaging = FALSE, sensor = FALSE, override_limit = FALSE)
# bring the geo data back in the original data frame of urban centers
UrbanCenters["lat"] <- UrbanLoc$lat
UrbanCenters["lon"] <- UrbanLoc$lon
UrbanCenters["full name"] <- a
UrbanCenters$City <- tolower(UrbanCenters$City)
# delete whats not needed anymore
rm(UrbanLoc)
rm(table)
rm(URL)
rm(b)
rm(a)
# put in costal megacities
UrbanCenters$costalMC=0
UrbanCenters$costalMC[UrbanCenters$City == "tokyo"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "jakarta"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "seoul"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "shanghai"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "manila"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "karachi"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "new york city"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "sao paolo"] <- "1"
############################################
############# World Bank Data  #############
############################################
############################################
#Load the World Bank Data on the nominal Urban Population
#WB_Urban_Pop = WDI(indicator='SP.URB.TOTL', country='all', start=1970, end=2013)
########################################################################################
########################################################################################
############################   MERGING  DATA    ########################################
########################################################################################
########################################################################################
#!!!!!!!!!!!!!!!!!!!!!!#
#!!!!TIME CONSUMING!!!!#
#!!!!!!!!!!!!!!!!!!!!!!#
############################################
# Merging Urban Centers with world.cities with respective distance of each City to closes Urban Censter
#function for distance
distance.UC <- function(data, logA, latA, logUC, latUC){
gdist(data[, logA], data[, latA], data[, lonUC], data[, latUC],
units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
}
# renaming colums and select sub-sets for merging over fake variable to create Matrix City X Urban (~ 60.000 Cities X ~ 500 urban Centers)
colnames(UrbanCenters)[5] <- "Area"
colnames(UrbanCenters)[6] <- "Density"
UCmerge <- subset(UrbanCenters, select = c("lon", "lat", "full name", "Population", "Area", "Density", "costalMC"))
UCmerge$fake=1
WCmerge <-subset(world.cities, select = c("long", "lat"))
WCmerge["CityID"] <- rownames(world.cities)
WCmerge$fake=1
Zillion <-merge(UCmerge, WCmerge, by=c("fake"))
# find each distance ( ~ 30 million individual distances will be found )
Zillion["DISTkm"] <- gdist(Zillion$lon, Zillion$lat.x, Zillion$long, Zillion$lat.y, units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
# reduce to only the closest urban center for each and every city, 30 million distances to the ~ 60.000 minimal ones
Zillion.min <- aggregate(DISTkm ~ CityID, Zillion, function(x) min(x))
Zillion.fullmin <- merge(Zillion.min, Zillion, by=c("CityID", "DISTkm"))
Zillion.fullmin["CityID"] <- Zillion.fullmin$"CityID"
Zillion.fullmin["Closest.Urban.Center"] <- Zillion.fullmin$"full name"
Zillion.fullmin["CUC.dist.km"] <- Zillion.fullmin$"DISTkm"
# bring information on closest urban center and the respective distance back into  'world.cities'
UR.WC.merger <- subset(Zillion.fullmin, select = c("CityID", "Closest.Urban.Center", "CUC.dist.km", "Population", "Area", "Density", "costalMC"))
# new dataset WC.UCdist! which stands for
world.cities["CityID"] <-rownames(world.cities)
WC.UC.dist <- merge(world.cities, UR.WC.merger, by="CityID")
WC.UC.dist["attack.on.urban.center"] <- (WC.UC.dist$CUC.dist.km<=(20+(2*(((WC.UC.dist$Area)/pi)**0.5))))
WC.UC.dist["attack.on.urban.centers.environment"] <- (WC.UC.dist$CUC.dist.km<=(50+(3*(((WC.UC.dist$Area)/pi)**0.5))))
#remove rest
rm(distance.UC, WCmerge, UCmerge, Zillion, Zillion.min, Zillion.fullmin, UR.WC.merger)
View(WC.UC.dist)
View(WC.UC.dist)
WC.UC.dist <- WC.UC.dist[order(WC.UC.dist$pop, na.last=TRUE)]
View(WC.UC.dist)
WC.UC.dist <- WC.UC.dist[order(-WC.UC.dist$pop, na.last=TRUE)]
WC.UC.dist <- WC.UC.dist[order(-WC.UC.dist$pop, na.last=TRUE) , ]
View(WC.UC.dist)
View(WC.UC.dist)
write.csv(WC.UC.dist, file="city Data.csv")
