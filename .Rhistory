Rmdattacks$inUC[Rmdattacks$inUC == 0] <- "no"
Rmdattacks$inUC[Rmdattacks$inUC == 1] <- "yes"
Rmdattacks$Rel.Access <- round((((Rmdattacks$access/Rmdattacks$access.MAX)-1)*-100), digits = 2 )
Rmdattacks$Rel.Light <- round(((Rmdattacks$light/Rmdattacks$light.MAX)*100), digits = 2)
Rmdattacks$Rel.Density <- round(((Rmdattacks$density/Rmdattacks$density.MAX)*100), digits = 2)
Rmdattacks$Rel.Coast.Dist <- round((((Rmdattacks$coast.dist/Rmdattacks$coast.dist.MAX)-1)*-100), digits = 2)
Rmdattacks$Date.Place <- paste(Rmdattacks$Date, Rmdattacks$original.city, sep=", ")
Rmdattacks$latitude <- NULL
Rmdattacks$access <- NULL
Rmdattacks$access.MAX <- NULL
Rmdattacks$density <- NULL
Rmdattacks$density.MAX <- NULL
Rmdattacks$light <- NULL
Rmdattacks$light.MAX <- NULL
Rmdattacks$coast.dist <- NULL
Rmdattacks$coast.dist.MAX <- NULL
Rmdattacks$Date <- NULL
Rmdattacks$original.city <- NULL
colnames(Rmdattacks) <- c("On UC", "Killed & Wounded", "Rel. Access", "Rel. Light", "Rel. Density", "Rel. Prox. Coast", "Date & Place")
Rmdattacks <- Rmdattacks[c(7,1,2,4,3,6,5) ]
# show example attacks on map with distinginishing if take place on UC and labels
AttackMap <- BaseMap + geom_point(aes(x=longitude, y=latitude, shape = inUC, color = inUC), data = ExA, size = 7 ) +
theme(legend.position="none")+
geom_text(aes(x=longitude+0.3, y=latitude+0.08, fontface="bold", color = inUC, fontsize = 7), data=ExA, label=ExA$Date) +
scale_colour_manual(values = c("firebrick","pink"))
# Show lightmap
unzip("Downloaded_Data/Downloaded_Raster_Data.zip", exdir="Downloaded_Data")
unlink("Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
unlink("Downloaded_Data/GDP_grid_flt.tif")
unlink("Downloaded_Data/DICGSH1a.tif")
unlink("Downloaded_Data/GACGEM2a.tif")
unlink("Downloaded_Data/G19ESA3a.tif")
RASTERlight<- raster("Downloaded_Data/LNMDMS2a.tif")
#crop Raster to Turkey maps boundaries
e <- extent(27.9, 34.9, 36.2, 41.7)
LightLayer <- crop(RASTERlight, e)
#convert to usable dataframe including eliminating minor light values and aggregating the rest from 63 to only 6 levels
LightLayer <- as(LightLayer, "SpatialPixelsDataFrame")
LightLayer <- data.frame(LightLayer)
rm(RASTERlight, e)
unlink("Downloaded_Data/LNMDMS2a.tif")
colnames(LightLayer) <- c("light", "longitude", "latitude")
LightLayer$light <- as.numeric(LightLayer$light)
LightLayer <- subset(LightLayer, light > 3)
LightLayer$light <- recode (LightLayer$light, "4:10 = 1; 11:20 = 2; 21:30 = 3; 31:40 = 4; 41:50 = 5; 51:63 = 6", as.numeric.result=TRUE)
LightMap <- BaseMap + geom_tile(aes(x = longitude, y = latitude, fill=light), data = LightLayer, alpha = 0.7) +
geom_point(aes(x=longitude, y=latitude, shape = inUC, color = inUC), data = ExA, size = 7 ) +
scale_fill_gradient(low = "darkblue", high= "lightblue") +
theme(legend.position="none") +
geom_text(aes(x=longitude+0.3, y=latitude+0.08, fontface="bold", color = inUC, fontsize = 7), data=ExA, label=ExA$Date) +
scale_colour_manual(values = c("firebrick","pink"))
rm(LightLayer)
# Show Accessmap
unzip("Downloaded_Data/Downloaded_Raster_Data.zip", exdir="Downloaded_Data")
unlink("Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
unlink("Downloaded_Data/GDP_grid_flt.tif")
unlink("Downloaded_Data/DICGSH1a.tif")
unlink("Downloaded_Data/G19ESA3a.tif")
unlink("Downloaded_Data/LNMDMS2a.tif")
RASTERAccess<- raster("Downloaded_Data/GACGEM2a.tif")
#crop Raster to Turkey maps boundaries
e <- extent(27.9, 34.9, 36.2, 41.7)
AccessLayer <- crop(RASTERAccess, e)
#aggregating cells because else, way too muh values
AccessLayer <- raster::aggregate(AccessLayer, fact=2, fun=mean, na.rm=TRUE)
#convert to usable dataframe including eliminating largest Access time values (in minutes ) and aggregating the rest to 10 min intervals
AccessLayer <- as(AccessLayer, "SpatialPixelsDataFrame")
AccessLayer <- data.frame(AccessLayer)
unlink("Downloaded_Data/GACGEM2a.tif")
rm(RASTERAccess, e)
colnames(AccessLayer) <- c("AccessTime", "longitude", "latitude")
AccessLayer$AccessTime <- as.numeric(AccessLayer$AccessTime)
#subsetting and binning Access Time values to 10 minute bins to reduce observations. N
#ow, only displaying areas that have Access Time < 120 minutes
AccessLayer <- subset(AccessLayer, AccessTime < 120)
AccessLayer$AccessTime <- AccessLayer$AccessTime/10
AccessLayer$AccessTime <- round(AccessLayer$AccessTime)
AccessMap <- BaseMap + geom_tile(aes(x = longitude, y = latitude, fill=AccessTime), data = AccessLayer) +
geom_point(aes(x=longitude, y=latitude, shape = inUC, color = inUC), data = ExA, size = 7 ) +
scale_fill_gradient(low = "lightblue", high= "darkblue") +
theme(legend.position="none") +
geom_text(aes(x=longitude+0.3, y=latitude+0.08, fontface="bold", color = inUC, fontsize = 7), data=ExA, label=ExA$Date) +
scale_colour_manual(values = c("firebrick","pink"))
# Proximity to Coaast
unzip("Downloaded_Data/Downloaded_Raster_Data.zip", exdir="Downloaded_Data")
unlink("Downloaded_Data/NLDI_2006_0p25_rev20111230.tif")
unlink("Downloaded_Data/GDP_grid_flt.tif")
unlink("Downloaded_Data/GACGEM2a.tif")
unlink("Downloaded_Data/G19ESA3a.tif")
unlink("Downloaded_Data/LNMDMS2a.tif")
RASTERCoast<- raster("Downloaded_Data/DICGSH1a.tif")
#crop Raster to Turkey maps boundaries
e <- extent(27.9, 34.9, 36.2, 41.7)
CoastLayer <- crop(RASTERCoast, e)
CoastLayer <- as(CoastLayer, "SpatialPixelsDataFrame")
CoastLayer <- data.frame(CoastLayer)
rm(RASTERCoast, e)
unlink("Downloaded_Data/DICGSH1a.tif")
colnames(CoastLayer) <- c("Coastdist", "longitude", "latitude")
CoastLayer$Coastdist <- as.numeric(CoastLayer$Coastdist)
#reducing No of observations to on-coast and less than a 100 km from coast
CoastLayer <- subset(CoastLayer, Coastdist <=0 & Coastdist >=-100)
CoastLayer$Coastdist <- CoastLayer$Coastdist*-1
CoastMap <- BaseMap + geom_tile(aes(x = longitude, y = latitude, fill=Coastdist), data = CoastLayer, alpha=0.7) +
geom_point(aes(x=longitude, y=latitude, shape = inUC, color = inUC), data = ExA, size = 7 ) +
scale_fill_gradient(low = "lightblue", high= "darkblue") +
theme(legend.position="none") +
geom_text(aes(x=longitude+0.3, y=latitude+0.08, fontface="bold", color = inUC, fontsize = 7), data=ExA, label=ExA$Date) +
scale_colour_manual(values = c("firebrick","pink"))
# Population Density
# Data sourced from http://neo.sci.gsfc.nasa.gov/servlet/RenderData?si=875430&cs=rgb&format=TIFF&width=3600&height=1800 and saved to Downloaded_Data
RASTERDens <- raster("Downloaded_Data/SEDAC_POP_2000-01-01_rgb_3600x1800.TIFF")
#crop Raster to Turkey maps boundaries
e <- extent(27.9, 34.9, 36.2, 41.7)
DensLayer <- crop(RASTERDens, e)
DensLayer <- as(DensLayer, "SpatialPixelsDataFrame")
DensLayer <- data.frame(DensLayer)
rm(RASTERDens, e)
colnames(DensLayer) <- c("Density", "longitude", "latitude")
DensLayer$Density <- as.numeric(DensLayer$Density)
#For whatever reason 255 is like NA, e.g. the sea
DensLayer <- subset(DensLayer, Density <255)
DensMap <- BaseMap + geom_tile(aes(x = longitude, y = latitude-0.1, fill=Density), data = DensLayer, alpha=0.7) +
geom_point(aes(x=longitude, y=latitude, shape = inUC, color = inUC), data = ExA, size = 7 ) +
scale_fill_gradient(low = "lightblue", high= "darkblue") +
theme(legend.position="none") +
geom_text(aes(x=longitude+0.3, y=latitude+0.08, fontface="bold", color = inUC, fontsize = 7), data=ExA, label=ExA$Date) +
scale_colour_manual(values = c("firebrick","pink")
)
plot(AccessMap)
plot(AccessMap)
plot(AttackMap)
plot(baseMap)
plot(BaseMap)
plot(CoastMap)
plot(Dens)
plot(DensMap)
plot(LightMap)
View(ExA)
View(Rmdattacks)
# Load the Pre-Analysis Global Terrorism Database
PreGTD <- read.csv("TerrorData/Pregtd.csv", header=TRUE)
PreGTD <-PreGTD[order(-PreGTD$eventid, na.last=TRUE) , ]
### take out what we need
Stat2GTD <- subset(PreGTD, select=c(eventid, iyear, country_txt, region_txt, pop.that.year, Rel.CS, inUC, aroundUC, Rank01.C,
Rank01.W, capital, largestC, largest.UC, WC.UC.dist.km, TUPscale, PROPscale, HUMscale,
Extra.WAR.In, Extra.WAR.Out, Intra.WAR, Inter.WAR, coast.dist, coast.dist.MIN, coast.dist.MAX,
access, access.MAX, light, light.MAX, nldi, nldi.MAX, urbn.cover, city.gdp, gdp.MAX, density,
density.MAX, density.growth, density.growth.MAX, EN.URB.MCTY.TL.ZS, SP.URB.TOTL.IN.ZS,
EN.URB.LCTY.UR.ZS, latitude, longitude, Pop.Coast.Dist, WCUC.city, WCUC.city.old, merge))
# In order to build our Varibales, we should exclude the influence of negative components, if there are any
nonnegative <- function(x) ifelse(x<0, 0, x)
### First Dependent Variable: >Urban<
# 25% (Country relative) City Rank -> Urban as Log Size                             (time variant)
# 25% (Country relative) City Population -> Urban as Size                           (time variant)
# 25% (Country relative) Location's Urban Landcover -> Urban as Surface             (not time variant)
# 25% (Country relative) Location's Nightlights -> Urban as Life                    (not time variant, but data is out there)
Stat2GTD["DV.Target.Urban"] <- (nonnegative(Stat2GTD$Rank01.C*0.25)
+ nonnegative(Stat2GTD$Rel.CS*0.25)
+ nonnegative(Stat2GTD$urbn.cover/100*0.25)
+ nonnegative(Stat2GTD$light/Stat2GTD$light.MAX*0.25))
### Second Dependent Variable: >Crowded<
# 60% (Country relative) Location's Population Density -> Crowded as Density                        (time variant)
# 30% (Country relative) Location's Population Density Growth over past years -> Crowded as Growth  (time variant)
# 10% (Country relative) Night Light Development Index (NLDI) -> Crowded as Inequality              (not time variant)
Stat2GTD["DV.Target.Crowded"] <- (nonnegative(Stat2GTD$density/Stat2GTD$density.MAX*0.60)
+ nonnegative(Stat2GTD$density.growth/Stat2GTD$density.growth.MAX*0.30)
+ nonnegative(Stat2GTD$nldi/Stat2GTD$nldi.MAX*0.10))
### Third Dependent Variable: >Connected<
# 50% (Country relative) Travel Distance to larger City -> Connected as Proximity to Larger Cities  (not time variant)
# 25% (Country relative) Travel Location's Nightlights -> Connected as Electrified                  (not time variant)
# 25% (Country relative) Locations GDP -> Connected as Productive                                   (not time variant)
Stat2GTD["DV.Target.Connected"] <- (nonnegative((((Stat2GTD$access/Stat2GTD$access.MAX)-1)*-1)*0.5)
+ nonnegative(Stat2GTD$light/Stat2GTD$light.MAX*0.25)
+ nonnegative(Stat2GTD$city.gdp/Stat2GTD$gdp.MAX*0.25))
### Forth Dependent Variable: >Coastal<
# 100% (Country relative) Distance to the Coast, whereas landlocked countries are NA                (not time variant)
Stat2GTD["DV.Target.Coastal"] <- ifelse(Stat2GTD$coast.dist.MIN >= 20, NA,
nonnegative(((Stat2GTD$coast.dist/Stat2GTD$coast.dist.MAX)-1)*-1))
rm(nonnegative)
##################### Map 0: World during peace #####################
GVisD <-Stat2GTD
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(pop.that.year) & !is.na(longitude) & Extra.WAR.In==0 & Inter.WAR==0 & Intra.WAR==0)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=1000)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
world1 <- gvisGeoChart(GVisD,
locationvar='Latlong',
sizevar = "Victims",
colorvar = "Population",
hovervar="WCUC.city",
options=list(colorAxis="{colors:['green', 'darkred']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", sizeAxis="{minValue: 1,  maxSize: 25}",
width=1112, height=694, markerOpacity=0.4))
plot(world1)
cat(world1$html$chart, file="Analysis Test/googleVis/WorldATpeace_min1000Victims.html")
##################### Map 0B: World during peace before 1990 #####################
GVisD <-Stat2GTD
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(pop.that.year) & !is.na(longitude) & Extra.WAR.In==0 & Inter.WAR==0 & Intra.WAR==0 & iyear<=1990)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=500)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
world2 <- gvisGeoChart(GVisD,
locationvar='Latlong',
sizevar = "Victims",
colorvar = "Population",
hovervar="WCUC.city",
options=list(colorAxis="{colors:['green', 'red']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", sizeAxis="{minValue: 1,  maxSize: 25}",
width=1112, height=694, markerOpacity=0.4))
plot(world2)
cat(world2$html$chart, file="Analysis Test/googleVis/WorldATpeace_min500Victims_before90.html")
##################### Map 0C: World during peace afrer 1990 #####################
GVisD <-Stat2GTD
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(pop.that.year) & !is.na(longitude) & Extra.WAR.In==0 & Inter.WAR==0 & Intra.WAR==0 & iyear>=1991)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=500)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
world3 <- gvisGeoChart(GVisD,
locationvar='Latlong',
sizevar = "Victims",
colorvar = "Population",
hovervar="WCUC.city",
options=list(colorAxis="{colors:['green', 'orange']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", sizeAxis="{minValue: 1,  maxSize: 25}",
width=1112, height=694, markerOpacity=0.4))
plot(world3)
cat(world3$html$chart, file="Analysis Test/googleVis/WorldATpeace_min500Victims_after90.html")
##################### Map 0C : World including war before 1990 #####################
GVisD <-Stat2GTD
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(pop.that.year) & !is.na(longitude) & iyear<=1990)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=500)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
world4 <- gvisGeoChart(GVisD,
locationvar='Latlong',
sizevar = "Victims",
colorvar = "Population",
hovervar="WCUC.city",
options=list(colorAxis="{colors:['green', 'orange']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", sizeAxis="{minValue: 1,  maxSize: 25}",
width=1112, height=694, markerOpacity=0.4))
cat(world4$html$chart, file="Analysis Test/googleVis/World_min500Victims_before90.html")
plot(world4)
##################### Map 0D : World including war after 1990 #####################
GVisD <-Stat2GTD
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(pop.that.year) & !is.na(longitude) & iyear>=1990)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=500)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
world5 <- gvisGeoChart(GVisD,
locationvar='Latlong',
sizevar = "Victims",
colorvar = "Population",
hovervar="WCUC.city",
options=list(colorAxis="{colors:['green', 'orange']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", sizeAxis="{minValue: 1,  maxSize: 25}",
width=1112, height=694, markerOpacity=0.4))
plot(world5)
cat(world5$html$chart, file="Analysis Test/googleVis/World_min500Victims_after90.html")
##################### Map 1: Region Before 2004  #####################
GVisD <-Stat2GTD
GVisD$WCUC.city[GVisD$WCUC.city=="mersin"] <- "mercin"
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(pop.that.year) & !is.na(longitude) & longitude<=70 & longitude>=10 & latitude<=45 & latitude>=-15 & iyear<=2003)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=10 & Number.of.Attacks>=5)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
regionbefore2004 <- gvisGeoChart(GVisD,
locationvar='Latlong',
colorvar = "Victims",
sizevar = "Population",
hovervar="WCUC.city",
options=list(colorAxis="{colors:['green', 'orange', 'orange', 'darkred']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", sizeAxis="{minValue: 1,  maxSize: 25}",
width=1112, height=694, markerOpacity=0.5, region=145))
plot(regionbefore2004)
cat(regionbefore2004$html$chart, file="Analysis Test/googleVis/Region_min10Victims_before04.html")
##################### Map 2: Region After 2004  #####################
GVisD <-Stat2GTD
GVisD$WCUC.city[GVisD$WCUC.city=="mersin"] <- "mercin"
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(pop.that.year) & !is.na(longitude) & longitude<=70 & longitude>=10 & latitude<=45 & latitude>=-15 & iyear>=2004)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=10 & Number.of.Attacks>=5)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
regionafter2004 <- gvisGeoChart(GVisD,
locationvar='Latlong',
colorvar = "Victims",
sizevar = "Population",
hovervar="WCUC.city",
options=list(colorAxis="{colors:['green', 'orange', 'orange','orange','orange','orange',
'orange','orange','orange','orange','orange','orange','orange','darkred']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", sizeAxis="{minValue: 1,  maxSize: 25}",
width=1112, height=694, markerOpacity=0.5, region=145))
plot(regionafter2004)
cat(regionafter2004$html$chart, file="Analysis Test/googleVis/Region_min10Victims_after04.html")
##################### Map 3: Turkey  #####################
GVisD <-Stat2GTD
GVisD$WCUC.city[GVisD$WCUC.city=="mersin"] <- "mercin"
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(longitude) & country_txt=="turkey" & longitude<=70 & longitude>=10 & latitude<=45 & latitude>=-15)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=1)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Size.1.to.10"] <- round(5*(GVisD$Rank01.C+GVisD$Rel.CS))
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
TurkeyAll <- gvisGeoChart(GVisD,
locationvar='Latlong',
colorvar = "Population",
sizevar = "Victims",
hovervar="WCUC.city",
options=list(region='TR', colorAxis="{colors:['green', 'red', 'red']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", dataMode="markers",
displayMode='text', width=1112, height=694, sizeAxis="{minValue: 60,  maxSize: 70}"))
plot(TurkeyAll)
cat(TurkeyAll$html$chart, file="Analysis Test/googleVis/Turkey.html")
##################### Map 4: Without Istanbul  #####################
GVisD <-Stat2GTD
GVisD$WCUC.city[GVisD$WCUC.city=="mersin"] <- "mercin"
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(longitude) & country_txt=="turkey" & WCUC.city!="istanbul" & longitude<=70 & longitude>=10 & latitude<=45 & latitude>=-15)
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(longitude) & country_txt=="turkey" & longitude<=70 & longitude>=10 & latitude<=45 & latitude>=-15)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=1)
rm(Acount, Ahum)
GVisD <-GVisD[order(-GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Size.1.to.10"] <- round(5*(GVisD$Rank01.C+GVisD$Rel.CS))
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
TurkeyNOistanbul <- gvisGeoChart(GVisD,
locationvar='Latlong',
colorvar = "Population",
sizevar = "Victims",
hovervar="WCUC.city",
options=list(region='TR', colorAxis="{colors:['green', 'red', 'red']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", dataMode="markers",
displayMode='text', width=1112, height=694, sizeAxis="{minValue: 20,  maxSize: 50}"))
plot(TurkeyNOistanbul)
cat(TurkeyNOistanbul$html$chart, file="Analysis Test/googleVis/TurkeyNOistanbul.html")
TurkeyAll <- gvisGeoChart(GVisD,
locationvar='Latlong',
colorvar = "Population",
sizevar = "Victims",
hovervar="WCUC.city",
options=list(region='TR', colorAxis="{colors:['green', 'red', 'red' 'red', 'red', 'red', 'red', 'red']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", dataMode="markers",
displayMode='text', width=1112, height=694, sizeAxis="{minValue: 60,  maxSize: 70}"))
plot(TurkeyAll)
GVisD <-Stat2GTD
GVisD$WCUC.city[GVisD$WCUC.city=="mersin"] <- "mercin"
GVisD <- subset(GVisD, !is.na(latitude) & !is.na(longitude) & country_txt=="turkey" & longitude<=70 & longitude>=10 & latitude<=45 & latitude>=-15)
GVisD["Latlong"] <- paste(GVisD$latitude, GVisD$longitude, sep=":")
GVisD["citycode"] <- GVisD$merge
GVisD["one"] <- 1
Acount <- aggregate(one ~ citycode,GVisD,FUN=sum)
Ahum <- aggregate(HUMscale ~ citycode,GVisD,sum)
colnames(Acount)[colnames(Acount) == "one"] <- "Number.of.Attacks"
colnames(Ahum)[colnames(Ahum) == "HUMscale"] <- "Total.Number.of.Victims"
GVisD <- merge(GVisD, Acount, by=c("citycode"), all.x=TRUE)
GVisD <- merge(GVisD, Ahum, by=c("citycode"), all.x=TRUE)
GVisD <- subset(GVisD, Total.Number.of.Victims>=1)
rm(Acount, Ahum)
GVisD <-GVisD[order(GVisD$WC.UC.dist.km, -GVisD$pop.that.year, na.last=TRUE) , ]
GVisD <- GVisD[!duplicated(GVisD$WCUC.city),]
GVisD["Population"] <- GVisD$pop.that.year
GVisD["Size.1.to.10"] <- round(5*(GVisD$Rank01.C+GVisD$Rel.CS))
GVisD["Victims"] <- round(GVisD$Total.Number.of.Victim)
TurkeyAll <- gvisGeoChart(GVisD,
locationvar='Latlong',
colorvar = "Population",
sizevar = "Victims",
hovervar="WCUC.city",
options=list(region='TR', colorAxis="{colors:['green', 'red', 'red' 'red', 'red', 'red', 'red', 'red']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", dataMode="markers",
displayMode='text', width=1112, height=694, sizeAxis="{minValue: 60,  maxSize: 70}"))
plot(TurkeyAll)
TurkeyAll <- gvisGeoChart(GVisD,
locationvar='Latlong',
colorvar = "Population",
sizevar = "Victims",
hovervar="WCUC.city",
options=list(region='TR', colorAxis="{colors:['green', 'red', 'red' 'red', 'red', 'red', 'red', 'red']}",
legend="{textStyle: {color: 'black', fontSize: 16}}",
legend.numberFormat="{numberFormat:'.'}",
backgroundColor="black", dataMode="markers",
displayMode='text', width=1112, height=694, sizeAxis="{minValue: 60,  maxSize: 70}"))
plot(TurkeyAll)
