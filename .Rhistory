############################################
# We introduce our third scale: "Extent of Human Damage (HUMscale)" which adds wounded and killed /and write it back into the GTD
GTD["HUMscale"] <- GTD$nkill+GTD$nwound
GTD$HUMscale <- as.numeric(GTD$HUMscale)
###########################################
############## BIG CITY DATA ##############
###########################################
# here: http://download.maxmind.com/download/worldcities/worldcitiespop.txt.gz and transformed into CSV
worldcities2013 <- read.csv("City Data/worldcitiespop.csv")
# introduce Tehran as it was missing in the original dataset
worldcities2013 <- rbind(worldcities2013, data.frame(X=0,Country="ir", City="tehran", AccentCity="Tehran",
Region= 1, Latitude=35.67, Longitude=51.43,Population=7160094))
# introduce Akkaraipattu as it was missing in the original dataset
worldcities2013 <- rbind(worldcities2013, data.frame(X=0,Country="lk", City="Akkaraipattu", AccentCity="Akkaraipattu",
Region= 31, Latitude=7.227862, Longitude=81.850551,Population=35000))
# sorting by population
worldcities2013 <- worldcities2013[order(-worldcities2013$Population, na.last=TRUE) , ]
source('SmallScripts/2digit2ctry.R')
worldcities2013$City <- gsub(" ", "", worldcities2013$City)
worldcities2013$City <- tolower(worldcities2013$City)
### list the world capital cities
data(world.cities)
world.cities$name <- tolower(world.cities$name)
world.cities2009 <- world.cities[order(-world.cities$pop, na.last=TRUE) , ]
rm(world.cities)
#The dataframe wrongly lists dehli as not being the capital of india, plus had a typo in seoul, which both we recode.
world.cities2009$capital[world.cities2009$name == "delhi" & world.cities2009$country.etc == "India"] <- "1"
world.cities2009$name[world.cities2009$name == "soul" & world.cities2009$country.etc == "Korea South"] <- "seoul"
world.cities2009$country.etc <- gsub("Russia","Russian Federation", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("UK","United Kingdom", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("USA","United States of America", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("Korea North","Korea, Democratic People's Republic of", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("Korea South","Korea, Republic of", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("Sicily","Italy", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("East Timor","Timor-Leste", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("Madeira","Portugal", world.cities2009$country.etc)
world.cities2009$country.etc <- gsub("Madiera","Portugal", world.cities2009$country.etc)
##############################################################################################
# merge the two sets: cities 2013 and cities 2009
world.cities2009$name <- gsub(" ", "", world.cities2009$name)
world.cities2009$name <- tolower(world.cities2009$name)
world.cities2009$country.etc<-gsub(" ", "",world.cities2009$country.etc, ignore.case=TRUE)
world.cities2009$country.etc <- tolower(world.cities2009$country.etc)
worldcities2013$Country <- tolower(worldcities2013$Country)
worldcities2013 <- subset(worldcities2013, select =c("City", "Country", "Population", "Latitude", "Longitude", "Region"))
colnames(worldcities2013)[1] <- "name"
colnames(worldcities2013)[2] <- "country.etc"
colnames(worldcities2013)[3] <- "pop"
colnames(worldcities2013)[4] <- "lat"
colnames(worldcities2013)[5] <- "long"
world.cities2009$country.etc<-gsub("\\,", "",world.cities2009$country.etc, ignore.case=TRUE)
world.cities2009$merge <- paste(world.cities2009$country.etc, world.cities2009$name, sep="")
worldcities2013$merge <- paste(worldcities2013$country.etc, worldcities2013$name, sep="")
world.cities <- merge(world.cities2009, worldcities2013, by= c("merge", "name", "country.etc", "pop", "lat", "long"), all=TRUE)
world.cities <- world.cities[order(world.cities$merge, world.cities$pop),]
world.cities<-world.cities[!duplicated(world.cities$merge), ]
world.cities$merge <-NULL
world.cities <- world.cities[order(-world.cities$pop), ]
rm(worldcities2013, world.cities2009)
View(world.cities)
#########################################
########## URBAN CENTERS DATA ###########
#########################################
# Scrap Wiki on urban Centers
URL <- 'http://en.wikipedia.org/w/index.php?title=List_of_urban_areas_by_population&section=2'
table <- readHTMLTable(URL, encoding = "UTF-16")
UrbanCenters <- table [[2]]
UrbanCenters$City <- as.character(UrbanCenters$City)
#clean up the Urban Centers name in order to allow google.maps API to find them
UrbanCenters$City <- gsub("\\xc3\xb3","o", perl=TRUE, UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.*","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\[.+?\\]","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.+?\\)","", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:digit:]]", "", UrbanCenters$City)
UrbanCenters$City <- gsub("\\xe2\x80\x93.*","", perl=TRUE, UrbanCenters$City)
UrbanCenters$City <- gsub("Region", "", UrbanCenters$City)
UrbanCenters$City <- gsub("Greater ", "", UrbanCenters$City)
# put together a string with "Country, City" to allow google.maps API to find them
b <-data.frame(paste(UrbanCenters$Country, UrbanCenters$City, sep=", "), row.names = NULL)
b["loc"] <- b
b$loc <- as.character(b$loc)
b$loc <- gsub("^..", "", b$loc)
a<-(b$loc)
# look up lon lat data via google maps / the geocode function of the package maps
UrbanLoc <- geocode(a, output = c("latlon", "latlona", "more", "all"),messaging = FALSE, sensor = FALSE, override_limit = FALSE)
# bring the geo data back in the original data frame of urban centers
UrbanCenters["lat"] <- UrbanLoc$lat
UrbanCenters["lon"] <- UrbanLoc$lon
UrbanCenters["full name"] <- a
UrbanCenters$City <- tolower(UrbanCenters$City)
# delete whats not needed anymore
rm(UrbanLoc)
rm(table)
rm(URL)
rm(b)
rm(a)
# put in costal megacities
UrbanCenters$costalMC=0
UrbanCenters$costalMC[UrbanCenters$City == "tokyo"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "jakarta"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "seoul"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "shanghai"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "manila"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "karachi"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "new york city"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "sao paolo"] <- "1"
View(GTD)
GRD$country_txt
GRD$country_txt <- gsub(" ", "", GRD$country_txt)
GRD$country_txt <- tolower(GRD$country_txt)
GRD$country_txt <-gsub("\\,", "",GRD$country_txt, ignore.case=TRUE)
GTD$country_txt
GTD$country_txt <- gsub(" ", "", GTD$country_txt)
GTD$country_txt <- tolower(GTD$country_txt)
GTD$country_txt <-gsub("\\,", "",GTD$country_txt, ignore.case=TRUE)
View(GTD)
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
X <- GTD$city
source('CityCleaning.R')
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
Testframe <-data.frame(paste(Y, X, sep=", "), row.names = NULL)
View(UrbanCenters)
View(Testframe)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
View(Testframe)
# Merging Urban Centers with world.cities with respective distance of each City to closes Urban Censter
# renaming colums and select sub-sets for merging over fake variable to find each distance (~2million)
colnames(UrbanCenters)[5] <- "Area"
colnames(UrbanCenters)[6] <- "Density"
UCmerge <- subset(UrbanCenters, select = c("lon", "lat", "full name", "Population", "Area", "Density", "costalMC"))
UCmerge$fake=1
WCmerge <-subset(world.cities, select = c("long", "lat"))
WCmerge["CityID"] <- rownames(world.cities)
WCmerge$fake=1
Zillion <-merge(UCmerge, WCmerge, by=c("fake"))
#function for distance
distance.UC <- function(data, logA, latA, logUC, latUC){
gdist(data[, logA], data[, latA], data[, lonUC], data[, latUC],
units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
}
# find all ~2million distances
Zillion["DISTkm"] <- gdist(Zillion$lon, Zillion$lat.x, Zillion$long, Zillion$lat.y, units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
# reduce to only the closest urban center for each and every city in world.cities
Zillion.min <- aggregate(DISTkm ~ CityID, Zillion, function(x) min(x))
Zillion.fullmin <- merge(Zillion.min, Zillion, by=c("CityID", "DISTkm"))
Zillion.fullmin["CityID"] <- Zillion.fullmin$"CityID"
Zillion.fullmin["Closest.Uran.Center"] <- Zillion.fullmin$"full name"
Zillion.fullmin["CUC.dist.km"] <- Zillion.fullmin$"DISTkm"
# bring information on closest urban center and the respective distance back into world.cities
UR.WC.merger <- subset(Zillion.fullmin, select = c("CityID", "Closest.Uran.Center", "CUC.dist.km", "Population", "Area", "Density", "costalMC"))
# new dataset WC09.UCdist!
world.cities["CityID"] <-rownames(world.cities)
WC09.UCdist <- merge(world.cities, UR.WC.merger, by="CityID")
WC09.UCdist$Area <- as.numeric(WC09.UCdist$Area)
WC09.UCdist["attack.on.urban.center"] <- (WC09.UCdist$CUC.dist.km<=(3*(((WC09.UCdist$Area)/pi)**0.5)))
#remove rest
rm(distance.UC, WCmerge, UCmerge, Zillion, Zillion.min, Zillion.fullmin)
UCmerge <- subset(UrbanCenters, select = c("lon", "lat", "full name", "Population", "Area", "Density", "costalMC"))
View(UrbanCenters)
View(UrbanCenters)
# Scrap Wiki on urban Centers
URL <- 'http://en.wikipedia.org/w/index.php?title=List_of_urban_areas_by_population&section=2'
table <- readHTMLTable(URL, encoding = "UTF-16")
UrbanCenters <- table [[2]]
UrbanCenters$City <- as.character(UrbanCenters$City)
#clean up the Urban Centers name in order to allow google.maps API to find them
UrbanCenters$City <- gsub("\\xc3\xb3","o", perl=TRUE, UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.*","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\[.+?\\]","", UrbanCenters$City)
UrbanCenters$City <- gsub("\\(.+?\\)","", UrbanCenters$City)
UrbanCenters$City <- gsub("[[:digit:]]", "", UrbanCenters$City)
UrbanCenters$City <- gsub("\\xe2\x80\x93.*","", perl=TRUE, UrbanCenters$City)
UrbanCenters$City <- gsub("Region", "", UrbanCenters$City)
UrbanCenters$City <- gsub("Greater ", "", UrbanCenters$City)
# put together a string with "Country, City" to allow google.maps API to find them
b <-data.frame(paste(UrbanCenters$Country, UrbanCenters$City, sep=", "), row.names = NULL)
b["loc"] <- b
b$loc <- as.character(b$loc)
b$loc <- gsub("^..", "", b$loc)
a<-(b$loc)
# look up lon lat data via google maps / the geocode function of the package maps
UrbanLoc <- geocode(a, output = c("latlon", "latlona", "more", "all"),messaging = FALSE, sensor = FALSE, override_limit = FALSE)
# bring the geo data back in the original data frame of urban centers
UrbanCenters["lat"] <- UrbanLoc$lat
UrbanCenters["lon"] <- UrbanLoc$lon
UrbanCenters["full name"] <- a
UrbanCenters$City <- tolower(UrbanCenters$City)
# delete whats not needed anymore
rm(UrbanLoc)
rm(table)
rm(URL)
rm(b)
rm(a)
# put in costal megacities
UrbanCenters$costalMC=0
UrbanCenters$costalMC[UrbanCenters$City == "tokyo"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "jakarta"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "seoul"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "shanghai"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "manila"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "karachi"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "new york city"] <- "1"
UrbanCenters$costalMC[UrbanCenters$City == "sao paolo"] <- "1"
############################################
############# World Bank Data  #############
############################################
############################################
#Load the World Bank Data on the nominal Urban Population
WB_Urban_Pop = WDI(indicator='SP.URB.TOTL', country='all', start=1970, end=2013)
########################################################################################
########################################################################################
############################   MERGING  DATA    ########################################
########################################################################################
########################################################################################
############################################
# Merging Urban Centers with world.cities with respective distance of each City to closes Urban Censter
# renaming colums and select sub-sets for merging over fake variable to find each distance (~2million)
colnames(UrbanCenters)[5] <- "Area"
colnames(UrbanCenters)[6] <- "Density"
UCmerge <- subset(UrbanCenters, select = c("lon", "lat", "full name", "Population", "Area", "Density", "costalMC"))
UCmerge$fake=1
WCmerge <-subset(world.cities, select = c("long", "lat"))
WCmerge["CityID"] <- rownames(world.cities)
WCmerge$fake=1
Zillion <-merge(UCmerge, WCmerge, by=c("fake"))
#function for distance
distance.UC <- function(data, logA, latA, logUC, latUC){
gdist(data[, logA], data[, latA], data[, lonUC], data[, latUC],
units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
}
# find all ~2million distances
Zillion["DISTkm"] <- gdist(Zillion$lon, Zillion$lat.x, Zillion$long, Zillion$lat.y, units = "km", a = 6378137.0, b = 6356752.3142, verbose = FALSE)
# reduce to only the closest urban center for each and every city in world.cities
Zillion.min <- aggregate(DISTkm ~ CityID, Zillion, function(x) min(x))
Zillion.fullmin <- merge(Zillion.min, Zillion, by=c("CityID", "DISTkm"))
Zillion.fullmin["CityID"] <- Zillion.fullmin$"CityID"
Zillion.fullmin["Closest.Uran.Center"] <- Zillion.fullmin$"full name"
Zillion.fullmin["CUC.dist.km"] <- Zillion.fullmin$"DISTkm"
# bring information on closest urban center and the respective distance back into world.cities
UR.WC.merger <- subset(Zillion.fullmin, select = c("CityID", "Closest.Uran.Center", "CUC.dist.km", "Population", "Area", "Density", "costalMC"))
# new dataset WC09.UCdist!
world.cities["CityID"] <-rownames(world.cities)
WC09.UCdist <- merge(world.cities, UR.WC.merger, by="CityID")
WC09.UCdist$Area <- as.numeric(WC09.UCdist$Area)
WC09.UCdist["attack.on.urban.center"] <- (WC09.UCdist$CUC.dist.km<=(3*(((WC09.UCdist$Area)/pi)**0.5)))
#remove rest
rm(distance.UC, WCmerge, UCmerge, Zillion, Zillion.min, Zillion.fullmin)
View(world.cities)
View(world.cities)
world.cities$CityID <- NULL
X <- GTD$city
source('CityCleaning.R')
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
View(Testframe)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL, na.rm=FALE)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL, na.rm=F)
View(Testframe)
View(Testframe)
Testframe <-data.frame(paste(Y, X, sep="", na.rm=F), row.names = NULL)
View(Testframe)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
View(Testframe)
View(GTD)
X <- GTD$city
source('CityCleaning.R')
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
View(Testframe)
X <- GTD$city
source('CityCleaning.R')
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
View(Testframe)
X <- GTD$city
source('CityCleaning.R')
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
View(Testframe)
View(Testframe)
mergeGDT((paste(Y, X, sep=""), row.names = NULL)
mergeGDT((paste(Y, X, sep="") row.names = NULL)
Testframe[0] = "merge"
Testframe[1] = "merge"
View(Testframe)
colnames(Testframe[1]) = "merge"
View(Testframe)
colnames(Testframe[0]) = "merge"
Testframe[1] <-data.frame(paste(Y, X, sep=""), row.names = NULL)
colnames(Testframe[1]) = "merge"
View(Testframe)
(Testframe["merge"] <- rownames(Testframe)
)
View(Testframe)
(Testframe["merge"] <- Testframe[1]
)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
Testframe["merge"] <- Testframe[1]
View(Testframe)
t.world.cities <-world.cities
t.world.cities$merge <- paste(world.cities$country.etc, world.cities$name, sep=""))
t.world.cities$merge <- paste(world.cities$country.etc, world.cities$name, sep="")
View(t.world.cities)
View(Testframe)
View(GTD)
Testframe <- GTD[1:20]
View(Testframe)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
Testframe["merge"] <- Testframe[1]
Testframe <- GTD[1:2]
View(Testframe)
Testframe["merge"] <- Testframe[1]
View(Testframe)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
Testframe["merge"] <- Testframe[1]
Testframe <- GTD[2:5]
View(Testframe)
X <- GTD$city
source('CityCleaning.R')
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
Testframe <-data.frame(paste(Y, X, sep=""), row.names = NULL)
Testframe["merge"] <- Testframe[1]
Testframe <- GTD[2:5]
View(Testframe)
View(WB_Urban_Pop)
unique(WB_Urban_Pop$country)
View(Testframe)
Testframe <-data.frame(paste(Y, X, sep=""))
View(Testframe)
Testframe["merge"] <-data.frame(paste(Y, X, sep=""))
View(Testframe)
X <-gsub("NA", NA, X)
Testframe["merge"] <-data.frame(paste(Y, X, sep=""))
View(Testframe)
View(t.world.cities)
Testframe["merge"] <-data.frame(paste(Y, X, sep=""), row.names=FALSE)
Testframe["merge"] <-data.frame(paste(Y, X, sep=""), rownames=FALSE)
Testframe["merge"] <-data.frame(paste(Y, X, sep=""))
Testframe <- GTD[2:5]
View(Testframe)
Testframe <- GTD[2:5]
Testframe["merge"] <-data.frame(paste(Y, X, sep=""))
View(Testframe)
View(GTD)
Testframe <- GTD[1]
Testframe["merge"] <-data.frame(paste(Y, X, sep=""))
View(Testframe)
world.cities$CityID <- NULL
View(t.world.cities)
View(t.world.cities)
View(t.world.cities)
X<-t.world.cities$name
X <- gsub("\\,.*","",X)
X <- gsub("\\-","",X)
X <- gsub("\\'","",X)
X <- gsub("\\-","",X)
t.world.cities$name<-X
View(t.world.cities)
t.world.cities$country.etc<- gsub("\\-","",t.world.cities$country.etc)
View(t.world.cities)
t.world.cities$country.etc<- gsub("\\'","",t.world.cities$country.etc)
View(t.world.cities)
View(t.world.cities)
t.world.cities$merge <- paste(world.cities$country.etc, world.cities$name, sep="")
View(t.world.cities)
View(t.world.cities)
t.world.cities$merge <- gsub("\\-","",t.world.cities$merge)
t.world.cities$merge <- gsub("\\'","",t.world.cities$merge)
View(t.world.cities)
View(Testframe)
PreGTD <- merge(Testframe, t.world.cities, by=c("merge"))
View(PreGTD)
View(GTD)
Testframe <- GTD[1, 2, 9, 11:22]
Testframe <- GTD[1, 2, 9, 11:21]
Testframe <- GTD[1, 2, 9, 11:20]
Testframe <- GTD[1|2|9|11:20]
View(Testframe)
Testframe["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
Y <- gsub(" ", "", GTD$country_txt)
Y <- tolower(Y)
Y <-gsub("\\,", "",Y, ignore.case=TRUE)
GTDcountry <- Y
X <- GTD$city
source('CityCleaning.R')
X <-gsub("NA", NA, X)
GTDcity <- X
Testframe["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
Testframe["merge"] <-data.frame(paste(GTDcountry, GTDcity, sep=""))
PreGTD <- merge(Testframe, t.world.cities, by=c("merge"))
View(PreGTD)
PreGTD$merge <- NULL
View(PreGTD)
PreGTD[3:10] <- NULL
PreGTD$[3:10] <- NULL
PreGTD$3:10 <- NULL
PreGTD$merge <- NULL
PreGTD$iday <- NULL
PreGTD$country <- NULL
PreGTD$country_txt <- NULL
PreGTD$region <- NULL
PreGTD$provstate <- NULL
View(PreGTD)
PreGTD$imonth<- NULL
View(PreGTD)
PreGTD$imonth<- NULL
PreGTD$name<- NULL
PreGTD$country.etc<- NULL
View(PreGTD)
PreGTD$name<- NULL
PreGTD$country.etc<- NULL
PreGTD$lat<- NULL
PreGTD$long<- NULL
PreGTD$Region<- NULL
View(PreGTD)
View(world.cities)
View(WC09.UCdist)
t.world.cities$merge <- paste(WC09.UCdist$country.etc, WC09.UCdist$name, sep="")
t.world.cities$merge <- gsub("\\-","",t.world.cities$merge)
t.world.cities$merge <- gsub("\\'","",t.world.cities$merge)
PreGTD <- merge(Testframe, WC09.UCdist, by=c("merge"))
WC09.UCdist2$merge <- paste(WC09.UCdist$country.etc, WC09.UCdist$name, sep="")
WC09.UCdist2$merge <- gsub("\\-","",t.world.cities$merge)
WC09.UCdist2$merge <- gsub("\\'","",t.world.cities$merge)
PreGTD <- merge(Testframe, WC09.UCdist2, by=c("merge"))
WC09.UCdist$merge <- paste(WC09.UCdist$country.etc, WC09.UCdist$name, sep="")
WC09.UCdist$merge <- gsub("\\-","",t.world.cities$merge)
WC09.UCdist$merge <- gsub("\\'","",t.world.cities$merge)
PreGTD <- merge(Testframe, WC09.UCdist2, by=c("merge"))
PreGTD <- merge(Testframe, WC09.UCdist, by=c("merge"))
PreGTD$merge <- NULL
PreGTD$iday <- NULL
PreGTD$country <- NULL
PreGTD$country_txt <- NULL
PreGTD$region <- NULL
PreGTD$provstate <- NULL
PreGTD$imonth<- NULL
PreGTD$name<- NULL
PreGTD$country.etc<- NULL
PreGTD$lat<- NULL
PreGTD$long<- NULL
PreGTD$Region<- NULL
PreGTD$country.etc<- NULL
View(PreGTD)
View(PreGTD)
write.csv(PreGTD, file="pregtd.csv")
View(PreGTD)
PreGTD <- merge(Testframe, WC09.UCdist, by=c("merge"), all=TRUE)
PreGTD <- merge(Testframe, WC09.UCdist, by=c("merge"), all.x=TRUE)
PreGTD <- merge(Testframe, WC09.UCdist, by=c("merge"), all.y=TRUE)
PreGTD <- merge(Testframe, WC09.UCdist, by=c("merge"), all.x=TRUE)
View(PreGTD)
PreGTD$merge <- NULL
PreGTD$iday <- NULL
PreGTD$country <- NULL
PreGTD$country_txt <- NULL
PreGTD$region <- NULL
PreGTD$provstate <- NULL
PreGTD$imonth<- NULL
PreGTD$name<- NULL
PreGTD$country.etc<- NULL
PreGTD$lat<- NULL
PreGTD$long<- NULL
PreGTD$Region<- NULL
PreGTD$country.etc<- NULL
write.csv(PreGTD, file="pregtd.csv")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "httr", "iterators", "dplyr", "plyr",
"XML", "maps", "ggmap", "Imap", "geosphere", "maptools", "rgeos", "foreach")
ipak(packages)
rm(packages)
rm(ipak)
#download a limited GTD we created for this assignment (5MB instead of 100MB file)
PreGTD_in_Memory <- getURL("https://rawgit.com/LBRETZIN/UrbanTerror/master/PreAnalysis/pregtd.csv", ssl.verifypeer=0L, followlocation=1L)
writeLines(GTD_in_Memory,'Pre.GTD.csv')
writeLines(PreGTD_in_Memory,'Pre.GTD.csv')
View(PreGTD)
#download a limited GTD we created for this assignment (5MB instead of 100MB file)
PreGTD_in_Memory <- getURL("https://rawgit.com/LBRETZIN/UrbanTerror/master/PreAnalysis/pregtd.csv", ssl.verifypeer=0L, followlocation=1L)
writeLines(PreGTD_in_Memory,'Pre.GTD.csv')
#download a limited GTD we created for this assignment (5MB instead of 100MB file)
PreGTD_in_Memory <- getURL("https://rawgit.com/LBRETZIN/UrbanTerror/master/PreAnalysis/pregtd.csv", ssl.verifypeer=0L, followlocation=1L)
writeLines(PreGTD_in_Memory,'Pre.GTD.csv')
rm(PreGTD_in_Memory)
#Load the Pre-Analysis Global Terrorism Database
PreGTD <- read.csv("Pre.GTD.csv", header=TRUE)
View(PreGTD)
PreGTD<-PreGTD[order(-PreGTD$eventid, na.last=TRUE)
)
PreGTD<-PreGTD[order(-PreGTD$eventid, na.last=TRUE)]
PreGTD<-PreGTD[order(-PreGTD$eventid, na.last=TRUE) , ]
View(PreGTD)
