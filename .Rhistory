# making a barplot showing
barplot(statedata1$Murder, main="Murder and Non-negligent Manslaughter rate per 100,000 Population (1976)", names.arg = state.abb, las=2, xlab="US States", space=1)
# we did not do the "setwd" with harddrive directory thing, as we were working on github online only
# hopefully this works instead
install.packages("devtools")
source_url('http://github.com/LBRETZIN/TestS18/blob/TestBranch/A1women.txt')
# the end :)
names(WorldPhones)
names(USArrests)
hist(USArrests$Murder)
?USArrests
MuricaCrime <- data.frame(USArrests, USArrests, StringsAsFactors = False)
MuricaCrime <- data.frame(USArrests, USArrests, StringsAsFactors = FALSE)
sapply (MuricaCrime$Murder, mean, na.rm=TRUE)
sapply (MuricaCrime$Murder, median, na.rm=TRUE)
sapply (MuricaCrime$1, median, na.rm=TRUE)
sapply (MuricaCrime$,1, median, na.rm=TRUE)
sapply (MuricaCrime$Murder, median, na.rm=TRUE)
Summary(MuricaCrime$Murder)
install.packages (Hmisc)
install.packages(Hmisc)
install.packages(HMisc)
library(Hmisc)
sapply (MuricaCrime$Murder, median)
hist(MuricaCrime$Murder)
barplot(MuricaCrime$Murder)
barplot(MuricaCrime$Murder, main=Arrests for murder per 100k population in 1973, names.arg=state.abb)
barplot(MuricaCrime$Murder, main="Arrests for murder per 100k population in 1973", names.arg=state.abb)
barplot(MuricaCrime$Murder, main="Arrests for murder per 100k population in 1973", names.arg=state.abb, las=2)
barplot(MuricaCrime$Murder, main="Arrests for murder per 100k population in 1973", names.arg=state.abb, las=2, xlab="Us States")
barplot(MuricaCrime$Murder, main="Arrests for murder per 100k population in 1973", names.arg=state.abb, las=2, xlab="Us States")
barplot(MuricaCrime$Murder, main="Arrests for murder per 100k population in 1973", names.arg=state.abb, las=2, xlab="US States")
barplot(MuricaCrime$Murder, main="Arrests for murder per 100k population in 1973", names.arg=state.abb, las=2, xlab="US States", space=1)
hist(MuricaCrime$Murder, main="Arrests for murder per 100k population in 1973", names.arg=state.abb, las=2, xlab="US States", space=1)
colsums(MuricaCrime)
colums(MuricaCrime)
columns(MuricaCrime)
colSums(MuricaCrime)
colSums(MuricaCrime$Murder)
MuricaCrime <- data.frame(USArrests$1, USArrests$1, StringsAsFactors = False
MuricaCrime <- data.frame(USArrests$Murder, USArrests$1, StringsAsFactors = False
MuricaCrime <- data.frame(USArrests$Murder, USArrests, StringsAsFactors = False
MuricaCrime <- data.frame(USArrests$Murder, USArrests, StringsAsFactors = False)
MuricaCrime <- data.frame(USArrests$Murder, USArrests, StringsAsFactors = False)
MuricaCrime <- data.frame(USArrests$Murder, USArrests, StringsAsFactors = FALSE)
data(USArrests)
MuricaCrime <- data.frame(USArrests, USArrests, StringsAsFactors = False)
MuricaCrime <- data.frame(USArrests, USArrests, StringsAsFactors = FALSE)
MuricaCrime <- data.frame(USArrests, StringsAsFactors = FALSE)
MuricaCrime <- data.frame(USArrests$Murder, StringsAsFactors = FALSE)
names(MuricaCrime)
hist(MuricaCrime)
MuricaCrime <- data.frame(USArrests$Murder)
hist(MuricaCrime)
barplot(MuricaCrime)
colSums(MuricaCrime)
Mur <- data.frame(USArrests$col1:3)
Murder <- data.frame(USArrests$Murder, stringsAsFactors = FALSE)
hist(Murder)
hist(USARRESTS)
hist(USArrests)
?USArrests
We are interested in the number of arrests for murder in the US,
#which we can find in the dataset "USArests"
?USArrests
data(USArrests)
#After loading the dataset, we also want to have it available as a dataframe,
#called MuricaCrime
MuricaCrime <- data.frame(USArrests, stringsAsFactors = False)
#Since we just care about the data for murder, we prepare a barplot
#showing the number of arrests for murder per 100,000 people in each of the 50
#states in 1973.
barplot(MuricaCrime$Murder,
main="Arrests for murder per 100k population in 1973",
names.arg=state.abb,
las=2, xlab="US States", space=1)
+ source(https://github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
+ source(https:\\github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
source(https:\\github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
source(https://github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
source(https:/github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
source(https:github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
source(github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
source(www.github.com/SaschaSchuster/Social_Data_Assignment1.git/murder1973, local=FALSE)
source(~/telephones.R)
source(~/telephones.R)
soure(Social_Data_Assignment1/telephones.R)
source(Social_Data_Assignment1/telephones.R)
source(~Social_Data_Assignment1/telephones.R)
source(~Social_Data_Assignment1/telephones.R, local=TRUE)
source(~Desktop/Social_Data_Assignment1/telephones.R, local=TRUE)
?AirPassengers
data(AirPassengers)
AirPassengers
colSums(AirPassengers$Jan)
colSums(AirPassengers)
colSums(AirPassengers$1949)
rowSums(AirPassengers$1949)
rowSums(AirPassengers$1)
rowSums(AirPassengers$"1949")
January <- (AirPassengers$Jan)
Array <- data.frame(AirPassengers, stringsAsFactors = FALSE)
colSums (Array, na.rm + FALSE, dims =1)
colSums (Array, na.rm = FALSE, dims =1)
rowSums (Array, na.rm = FALSE, dims=1)
Array
barplot(Arrays)
barplot(Array)
Array <- data.frame(AirPassengers, stringsasFactors = TRUE)
Array
data(HairEyeColor)
HairEyeColor
Titanic
sleep
state.x77
?state.x77
data(swiss)
swiss
colSums(swiss)
mean(swiss)
source=(https://github.com/SaschaSchuster/Social_Data_Assignment1/murder1973.git)
source=('https://github.com/SaschaSchuster/Social_Data_Assignment1/murder1973.git')
colMeans(Swiss)
colMeans(swiss)
colMeans(swiss, digits = 2)
colMeans(swiss, digits=2)
summary(swiss, digits=2)
summary(swiss, digits=1)
#For our second file, we are returning to the swiss data set included in to R to try out some functions of descriptive
#statistics, and also to include a dynamically linked file.
?swiss
data(swiss)
source=('https://github.com/SaschaSchuster/Social_Data_Assignment1/murder1973.git')
#First, let us have a look at the data we have for every canton in a view for all of Switzerland
colSums(swiss)
#Of course we are also interested in the mean of all columns, which we get by
colMeans(swiss)
#Finally, some overall, comparable data would be nice, but well rounded to the full digit.
summary(swiss, digits=1)
range(swiss)
range(swiss$Fertility)
r
title: "Untitled"
install.packages(microtyope)
install.packages(microtype)
###<b>
library(repmis)
library(repmis)
library(repmis)
install.packages()
install.packages('repmis')
library(repmis)
install.packages(repmis)
install.packages('repmis')
library(repmis)
install.packages('rJava')
library(rJava)
library(ggplot2)
fin(rJava)
fun(rJava)
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
library(dplyr)
install.packages("dplyr", "httr", "XML")
install.packages("dplyr", "httr", "XML")
librray(dplyr)
libray(dplyr)
library(dplyr)
install.packages("dplyr")
rm(find.java)
URL <- 'http://en.wikipedia.org/wiki/List_of_largest_cities_and_second_largest_cities_by_country'
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
tables <- URL %>% GET() %>%
content(as = 'parsed')
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
install.packages("XML")
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
install.packages("httr")
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
library(XML)
library(httr)
library(dplyr)
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(tables)
readHTMLTable(URL)
packs <- c('dplyr', 'XML', 'httr')
install.packages(packs)
library(packs)
packs <- c('dplyr', 'XML', 'httr')
install.packages('packs')
library(packs)
library('packs')
library("packs")
packs <- c('dplyr', 'XML', 'httr')
install.packages('packs')
library(dplyr)
library(XML)
library(httr)
install.packages("packs")
cities </ as.data.frame(readHTMLTable(URL
cities <- as.data.frame(readHTMLTable(URL
))
cities
View(cities)
View(cities)
View(cities)
cities <- as.data.frame(readHTMLTable(URL), header=TRUE)
select(cities, [1-3])
select(cities, -source)
select(cities, -Source)
select(cities, -Null.Source)
head(cities)
?iconv
iconv(cities)
View(cities)
View(cities)
iconv(cities, "UTF-8")
View(cities)
View(cities)
iconv(cities, "latin1")
View(cities)
cities <- as.data.frame(readHTMLTable(URL), header=TRUE, strings.as.factors=TRUE, encoding=UTF-8)
select(cities, -Source)
View(cities)
select(cities, -NULL.Source)
grep(^[A-Z]$, cities)
grep('^[A-Z]$', cities)
sample_frac(cities, 10)
sample_frac(cities, 0.1)
naDF <- data.frame(a = sample(c(1,2), 100, rep=TRUE) )
naDF <- data.frame(a = sample(c(1,2), 100, rep=TRUE), b = sample(c(3,4), 100, rep=TRUE), fNA = sample(c(100, 200, 300, 400, NA), 100, rep=TRUE))
View(naDF)
View(naDF)
filldf <- data.frame(a = c(1,2,1,2) b = c(3,3,4,4), c = c(5,5,5,5), fFull = c(100,200,300,400))
filldf <- data.frame(a = c(1,2,1,2), b = c(3,3,4,4), c = c(5,5,5,5), fFull = c(100,200,300,400))
filldf
FilledInData <- FillIn(naDF, filldf, Var1=fNA, var2=fFull, KeyVar=c("a","b")
)
install.packages("DataCombine")
FilledInData <- FillIn(naDF, filldf, Var1=fNA, var2=fFull, KeyVar=c("a","b")
)
library(DataCombine)
FilledInData <- FillIn(naDF, filldf, Var1=fNA, var2=fFull, KeyVar=c("a","b"))
FilledInData <- FillIn(naDF, filldf, Var1="fNA", var2="fFull", KeyVar=c("a","b"))
FilledInData <- FillIn(naDF, filldf, Var1="fNA", Var2="fFull", KeyVar=c("a","b"))
view(naDF)
View(naDF)
View(FilledInData)
View(filldf)
View(filldf)
install.packages('WDI')
WB_Urban_Pop = WDI(indicator='SP.URB.TOTL', country='all', start=1970, end=2013)
library(WDI)
WB_Urban_Pop = WDI(indicator='SP.URB.TOTL', country='all', start=1970, end=2013)
View(WB_Urban_Pop)
View(WB_Urban_Pop)
WDIsearch([Uu]rban)
WDIsearch('[Uu]rban')
rm(WB_Urban_Pop)
WDIUrbanDat <- WDI(indicator=c('EN.POP.SLUM.UR.ZS', 'EN.URB.LCTY.UR.ZS', 'EN.URB.MCTY', 'EN.URB.MCTY.TL.ZS', 'SP.URB.GROW', 'SP.URB.TOTL', 'SP.URB.TOTL.IN.ZS'), country=all, start=1970, end=2013)
?WDI
WDIUrbanDat <- WDI(indicator=c('EN.POP.SLUM.UR.ZS', 'EN.URB.LCTY.UR.ZS', 'EN.URB.MCTY', 'EN.URB.MCTY.TL.ZS', 'SP.URB.GROW', 'SP.URB.TOTL', 'SP.URB.TOTL.IN.ZS'), country="all", start=1970, end=2013)
View(WDIUrbanDat)
View(WDIUrbanDat)
?WDIcashe
?WDIcache
WDIUrbanDat2 <- WDI(indicator=c('EN.POP.SLUM.UR.ZS', 'EN.URB.LCTY.UR.ZS', 'EN.URB.MCTY', 'EN.URB.MCTY.TL.ZS', 'SP.URB.GROW', 'SP.URB.TOTL', 'SP.URB.TOTL.IN.ZS'), country="all", start=1970, end=2013, extras=TRUE)
WDIUrbanDat2 <- WDI(indicator=c('EN.POP.SLUM.UR.ZS', 'EN.URB.LCTY.UR.ZS', 'EN.URB.MCTY', 'EN.URB.MCTY.TL.ZS', 'SP.URB.GROW', 'SP.URB.TOTL', 'SP.URB.TOTL.IN.ZS'), country="all", start=1970, end=2013, extra=TRUE)
View(WDIUrbanDat)
View(WDIUrbanDat)
?WDI
View(WDIUrbanDat2)
ggplot(PreGTD) + geom_histogram(aes(x=CUC.dist.km))
library(ggplot)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("foreign", "car", "RCurl", "ggplot2", "WDI", "httr", "iterators", "dplyr", "plyr",
"XML", "maps", "ggmap", "Imap", "geosphere", "maptools", "rgeos", "foreach")
ipak(packages)
rm(packages)
rm(ipak)
ggplot(PreGTD, aes(x=CUC.dist.km, y=count)) +geom_histogram()
rm(FilledInData)
rm(WDIUrbanDat)
rm(WDIUrbanDat)
rm(WDIUrbanDat2)
rm(cities)
rm(filldf)
rm(naDF)
rm(URL)
rm(packs)
rm(tables)
getwd()
setwd("/R/GTD/UrbanTerror")
setwd("R/GTD/UrbanTerror")
read.csv("Pre.GTD.csv", header=TRUE)
read.csv("pregtd.csv")
read.csv("/PreAnalysis/pregtd.csv")
read.csv("PreAnalysis/pregtd.csv")
PreGTD <- read.csv("Pre.GTD.csv", header=TRUE)
PreGTD <- read.csv("PreAnalysis/pregtd.csv", header=TRUE)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km, y=count))
as.numeric(PreGTD$CUC.dist.km)
PreGTD <- read.csv("Pre.GTD.csv", header=TRUE)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km, y=count))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km, y="count"))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1)
?ggplot
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin")
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 2, stat="bin")
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin")
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin")
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.1, stat="bin")
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.2, stat="bin")
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.2, stat="bin", width=1)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.2, stat="bin", width=2, ylim=4000, xlim=1000)
ggplot(PreGTD, ylim=4000, xlim=1000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.2, stat="bin", width=2)
ggplot(PreGTD, scale_x_continous=1000, scale_y_continous=2000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.2, stat="bin", width=2)
ggplot(PreGTD, scale_x_continous=1000, scale_y_continous=2000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin", width=2)
ggplot(PreGTD, scale_x_continous=1000, scale_y_continous=2000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin", width=2, scale_x_continous=1000, scale_y_continous=2000)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin", width=2) + scale_x_continous=1000 + scale_y_continous=2000)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin", width=2) + scale_x_continous=1000 + scale_y_continous=2000
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin", width=2) + scale_x_continuous=1000 + scale_y_continuous=2000
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)
)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)()
)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_continuous(limits=c(0,4000))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_continuous(limits=c(0,3500))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_continuous(limits=c(0,2000))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_continuous(limits=c(0,2500))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_log10()+ scale_y_continuous(limits=c(0,2500))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10() + scale_y_continuous(limits=c(0,1000))
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10(limits=0)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10(limits=c(0, 1000)
)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10(ymin=0)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10(ymin>=0)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,500)) + scale_y_log10()
ggplot(PreGTD,iyear>=2000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2)
+ scale_x_continuous(limits=c(0,500)) + scale_y_log10()
ggplot(PreGTD,iyear>=2000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD,"iyear">=2000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD, aes("iyear">=2000)) +geom_histogram(aes(x=CUC.dist.km), binwidth = 0.5, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD,"iyear">=2000) +geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD, xlab="Distance to the nearest Urban Center") +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD, aes(xlab="Distance to the nearest Urban Center") +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
)
ggplot(PreGTD, aes(xlab="Distance to the nearest Urban Center")) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()
ggplot(PreGTD, aes(xlab="Distance to the nearest Urban Center")) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10(position="identity")
ggplot(PreGTD, aes(xlab="Distance to the nearest Urban Center")) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2) + scale_x_continuous(limits=c(0,1000)) + scale_y_log10(ymin=0)
ggplot(PreGTD, aes())
+geom_histogram(aes(x=CUC.dist.km), binwidth = 20,
stat="bin", width=2, colour="blue", filling="white")
+ scale_x_continuous(limits=c(0,1000))
+ scale_y_log10(ymin=0)
ggplot(PreGTD)
+geom_histogram(aes(x=CUC.dist.km), binwidth = 20,
stat="bin", width=2, colour="blue", filling="white")
+ scale_x_continuous(limits=c(0,1000))
+ scale_y_log10(ymin=0)
?aggregate
x<- aggregate(PreGTD$CUC.dist.km, by=list(PreGTD$iyear), FUN =mean)
View(x)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2, colour="blue", filling="white")
+ scale_x_continuous(limits=c(0,1000))
+ scale_y_log10(ymin=0)
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2, colour="blue", filling="white")
+ scale_x_continuous(limits=c(0,1000))
+ scale_y_log10()
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2, colour="blue", filling="white") + scale_x_continuous(limits=c(0,1000))       + scale_y_log10()
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", width=2, colour="blue", fill="white") + scale_x_continuous(limits=c(0,1000))       + scale_y_log10()
ggplot(PreGTD) +geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") + scale_x_continuous(limits=c(0,1000))       + scale_y_log10()
ggplot(PreGTD)+geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") + scale_x_continuous(limits=c(0,1000)) + scale_y_log10()+ labels(x="Distance to closest Urban Center", y="Number of Attacks", title="Number of attacks with increasing distance to CUC" )
ggplot(PreGTD)
+geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white")
ggplot(PreGTD, aes(x=CUC.dist.km, labels(x="Distance to closest Urban Center", y="Number of Attacks", title="Number of attacks with increasing distance to CUC")))
ggplot(PreGTD, aes(x=CUC.dist.km, labels(x="Distance to closest Urban Center", y="Number of Attacks", title="Number of attacks with increasing distance to CUC"))) +geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white")
+ scale_x_continuous(limits=c(0,1000))
+ scale_y_log10()
ggplot(PreGTD, aes(x=CUC.dist.km, labs(x="Distance to closest Urban Center", y="Number of Attacks",
title="Number of attacks with increasing distance to CUC"))) +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000)) +
scale_y_log10()
ggplot(PreGTD, aes(labs(x="Distance to closest Urban Center", y="Number of Attacks",
title="Number of attacks with increasing distance to CUC"))) +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000)) +
scale_y_log10()
+ labels(x="Distance to closest Urban Center", y="Number of Attacks", title="Number of attacks with increasing distance to CUC" )
ggplot(PreGTD, aes(labs(title="Number of attacks with increasing distance to CUC"))) +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000)) +
scale_y_log10()
ggplot(PreGTD, aes(labs(title="Number of attacks with increasing distance to CUC"))) + ggtitle("Test1") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000)) +
scale_y_log10()
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n attacks grouped by 10km distance") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000)) +
scale_y_log10()
ggplot(na.omit(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000)) +
scale_y_log10()
)
ggplot(na.omit(PreGTD)) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000)) +
scale_y_log10()
PreGTD2 <- PreGTD
PreGTD2 <- PreGTD2$coastalMC
PreGTD2 <- PreGTD
PreGTD2$coastalMC <- 0
View(PreGTD2)
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="identity", width=2, colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)", ymin=0)
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 1, stat="bin", colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 20, stat="bin", colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
ggplot(PreGTD) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(aes(x=CUC.dist.km), binwidth = 10, stat="bin", colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
ggplot(PreGTD, aes(x=PreGTDPreGTD)) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(binwidth = 10, stat="bin", colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
ggplot(PreGTD, aes(x=PreGTD)) + ggtitle("Attacks with Increasing Distance from their closest urban center \n (attacks grouped by 10km distance)") +
geom_histogram(binwidth = 10, stat="bin", colour="blue", fill="white") +
scale_x_continuous(limits=c(0,1000), name="Distance to nearest urban center (km)") +
scale_y_log10(name="attack count (log)")
citation("maps")
citation(WDI)
citation("WDI")
rawGTD <- read.csv("Terror Data/globalterrorismdb_0814dist.csv", header=TRUE)
GTD <- subset(rawGTD, select = c(eventid, iyear, imonth, iday, country, country_txt, region, provstate, region_txt, city, attacktype1, targtype1, targsubtype1,
weaptype1, weapsubtype1, propextent, nkill, nwound),
iyear >= 1970 & success == 1, na.strings = c("", " "))
sum(is.na(GTD))
107143/(114086*18)
Therefore, we include lat/lon data for each urban center using the google maps API. Then, the distance from each urban center to each city was calculated. The merged dataset assigns the closest urban center to each city (and the respective distance). The necessity comes from the way cities are coded in the GTD. While an attack on Tokyo, which is rarely attacked, is usually coded using "Tokyo", attacks in often targeted cities are usually localized more precisely - assigned to districts. Good examples for this phenomenon is Lima, or the urban area aroud Tel Aviv. Both are attacked often and the GTD delivers predominantly the sub-municipality as the place of attack. With the new dataset, we can set a parameter of distance around each urban center (as a place holder we currently use  (n=urban-center-area), and later decide to count any attack that falls into that parameter as an attack on the urban center itself. If the GTD codes "New York City", it finds both the urban center and the city - but as the GTD sometimes codes "Manhattan", we now have a match on the urban center "New York City" as the distance between the two falls within our parameter.
devtools::install_github("rstudio/rmarkdown")
ggplot(PreGTD, aes(CUC.dist.km, iyear)) +geom_point()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_point()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_line()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_boxplot()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_crossbar()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_jitter()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_dotplot()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_dotplot(binwidth=10)
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_dotplot(binwidth=0.10)
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_freqpoly()
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_freqpoly(stat="identity")
ggplot(PreGTD, aes(iyear, CUC.dist.km)) +geom_jitter()
PreGTD_in_Memory <- getURL("https://rawgit.com/LBRETZIN/UrbanTerror/master/PreAnalysis/pregtd.csv", ssl.verifypeer=0L, followlocation=1L)
qplot(CUC.dist.km, data=PreGTD, geom = "freqpoly", ylab= "sum of attacks", xlab= "year",
main="Number of Attacks with increasing distances from the nearest Urban Center")
count(PreGTD, "in.urban.centers.environment")
